<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.25.0114.1153                               -->
<workbook original-version='18.1' source-build='2024.3.3 (20243.25.0114.1153)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <Heatmap />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelExtractV2 />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SpatialFileLayer />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='neighbourhoods' inline='true' name='federated.1084i8c0f57s1e14ytlmd11ds3q9' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='neighbourhoods' name='ogrdirect.04izjvy1bzh4gy14bako51gffjtg'>
            <connection class='ogrdirect' directory='C:/Users/maria/Downloads' filename='neighbourhoods.geojson' password='' server='' tablename='' />
          </named-connection>
          <named-connection caption='listings_ny' name='textscan.1eu8k8l0ib5e8y178siif1hl64hc'>
            <connection class='textscan' directory='C:/Users/maria/Downloads' filename='listings_ny.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='ogrdirect.04izjvy1bzh4gy14bako51gffjtg' name='neighbourhoods.geojson' table='[neighbourhoods.geojson]' type='table'>
          <columns>
            <column datatype='string' name='neighbourhood' ordinal='0' />
            <column datatype='string' name='neighbourhood_group' ordinal='1' />
            <column datatype='spatial' name='Geometry' ordinal='2' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>neighbourhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighbourhood]</local-name>
            <parent-name>[neighbourhoods.geojson]</parent-name>
            <remote-alias>neighbourhood</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <object-id>[neighbourhoods.geojson_8145ECD9D5714C6187B45381F4269077]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighbourhood_group</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighbourhood_group]</local-name>
            <parent-name>[neighbourhoods.geojson]</parent-name>
            <remote-alias>neighbourhood_group</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <object-id>[neighbourhoods.geojson_8145ECD9D5714C6187B45381F4269077]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Geometry</remote-name>
            <remote-type>8</remote-type>
            <local-name>[Geometry]</local-name>
            <parent-name>[neighbourhoods.geojson]</parent-name>
            <remote-alias>Geometry</remote-alias>
            <ordinal>2</ordinal>
            <local-type>spatial</local-type>
            <aggregation>Collect</aggregation>
            <contains-null>true</contains-null>
            <object-id>[neighbourhoods.geojson_8145ECD9D5714C6187B45381F4269077]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='neighbourhoods.geojson' datatype='table' name='[__tableau_internal_object_id__].[neighbourhoods.geojson_8145ECD9D5714C6187B45381F4269077]' role='measure' type='quantitative' />
      <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
      <column caption='Neighbourhood Group' datatype='string' name='[neighbourhood_group]' role='dimension' type='nominal' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/maria/AppData/Local/Temp/TableauTemp/#TableauTemp_13w33x411gkdn913clnqy0qgb175.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='02/03/2025 03:07:59 PM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>neighbourhood</remote-name>
              <remote-type>129</remote-type>
              <local-name>[neighbourhood]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>neighbourhood</remote-alias>
              <ordinal>0</ordinal>
              <family>neighbourhoods.geojson</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>230</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>neighbourhood_group</remote-name>
              <remote-type>129</remote-type>
              <local-name>[neighbourhood_group]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>neighbourhood_group</remote-alias>
              <ordinal>1</ordinal>
              <family>neighbourhoods.geojson</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Geometry</remote-name>
              <remote-type>128</remote-type>
              <local-name>[Geometry]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Geometry</remote-alias>
              <ordinal>2</ordinal>
              <family>neighbourhoods.geojson</family>
              <local-type>spatial</local-type>
              <aggregation>Collect</aggregation>
              <approx-count>233</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Portugal&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='neighbourhoods.geojson' id='neighbourhoods.geojson_8145ECD9D5714C6187B45381F4269077'>
            <properties context=''>
              <relation connection='ogrdirect.04izjvy1bzh4gy14bako51gffjtg' name='neighbourhoods.geojson' table='[neighbourhoods.geojson]' type='table'>
                <columns>
                  <column datatype='string' name='neighbourhood' ordinal='0' />
                  <column datatype='string' name='neighbourhood_group' ordinal='1' />
                  <column datatype='spatial' name='Geometry' ordinal='2' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
    <datasource caption='listings.csv+ (Multiple Connections)' inline='true' name='federated.0ru8wam18lyyhe129e16g0307lb4' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='neighbourhoods' name='ogrdirect.09j1es70wot3oz14de1a90amkpu2'>
            <connection class='ogrdirect' directory='C:/Users/maria/Downloads' filename='neighbourhoods.geojson' password='' server='' tablename='' />
          </named-connection>
          <named-connection caption='listings' name='textscan.1abvozo0btl1xd13ckpac1y9iu6n'>
            <connection class='textscan' directory='C:/Users/maria/Downloads' filename='listings.csv' password='' server='' />
          </named-connection>
          <named-connection caption='reviews' name='textscan.02ykuag13pvqcm14s82490zctojs'>
            <connection class='textscan' directory='C:/Users/maria/Downloads' filename='reviews.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation join='full' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[listings.csv].[id]' />
              <expression op='[reviews.csv].[listing_id]' />
            </expression>
          </clause>
          <relation join='full' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[listings.csv].[neighbourhood]' />
                <expression op='[neighbourhoods.geojson].[neighbourhood]' />
              </expression>
            </clause>
            <relation connection='textscan.1abvozo0btl1xd13ckpac1y9iu6n' name='listings.csv' table='[listings#csv]' type='table'>
              <columns character-set='UTF-8' header='yes' locale='pt_PT'>
                <column datatype='integer' name='id' ordinal='0' />
                <column datatype='string' name='name' ordinal='1' />
                <column datatype='integer' name='host_id' ordinal='2' />
                <column datatype='string' name='host_name' ordinal='3' />
                <column datatype='string' name='neighbourhood_group' ordinal='4' />
                <column datatype='string' name='neighbourhood' ordinal='5' />
                <column datatype='real' name='latitude' ordinal='6' />
                <column datatype='real' name='longitude' ordinal='7' />
                <column datatype='string' name='room_type' ordinal='8' />
                <column datatype='integer' name='price' ordinal='9' />
                <column datatype='integer' name='minimum_nights' ordinal='10' />
                <column datatype='integer' name='number_of_reviews' ordinal='11' />
                <column datatype='date' name='last_review' ordinal='12' />
                <column datatype='real' name='reviews_per_month' ordinal='13' />
                <column datatype='integer' name='calculated_host_listings_count' ordinal='14' />
                <column datatype='integer' name='availability_365' ordinal='15' />
                <column datatype='integer' name='number_of_reviews_ltm' ordinal='16' />
                <column datatype='string' name='license' ordinal='17' />
              </columns>
            </relation>
            <relation connection='ogrdirect.09j1es70wot3oz14de1a90amkpu2' name='neighbourhoods.geojson' table='[neighbourhoods.geojson]' type='table'>
              <columns>
                <column datatype='string' name='neighbourhood' ordinal='0' />
                <column datatype='string' name='neighbourhood_group' ordinal='1' />
                <column datatype='spatial' name='Geometry' ordinal='2' />
              </columns>
            </relation>
          </relation>
          <relation connection='textscan.02ykuag13pvqcm14s82490zctojs' name='reviews.csv' table='[reviews#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='pt_PT'>
              <column datatype='integer' name='listing_id' ordinal='0' />
              <column datatype='date' name='date' ordinal='1' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[Geometry]' value='[neighbourhoods.geojson].[Geometry]' />
          <map key='[availability_365]' value='[listings.csv].[availability_365]' />
          <map key='[calculated_host_listings_count]' value='[listings.csv].[calculated_host_listings_count]' />
          <map key='[date]' value='[reviews.csv].[date]' />
          <map key='[host_id]' value='[listings.csv].[host_id]' />
          <map key='[host_name]' value='[listings.csv].[host_name]' />
          <map key='[id]' value='[listings.csv].[id]' />
          <map key='[last_review]' value='[listings.csv].[last_review]' />
          <map key='[latitude]' value='[listings.csv].[latitude]' />
          <map key='[license]' value='[listings.csv].[license]' />
          <map key='[listing_id]' value='[reviews.csv].[listing_id]' />
          <map key='[longitude]' value='[listings.csv].[longitude]' />
          <map key='[minimum_nights]' value='[listings.csv].[minimum_nights]' />
          <map key='[name]' value='[listings.csv].[name]' />
          <map key='[neighbourhood (neighbourhoods.geojson)]' value='[neighbourhoods.geojson].[neighbourhood]' />
          <map key='[neighbourhood]' value='[listings.csv].[neighbourhood]' />
          <map key='[neighbourhood_group (neighbourhoods.geojson)]' value='[neighbourhoods.geojson].[neighbourhood_group]' />
          <map key='[neighbourhood_group]' value='[listings.csv].[neighbourhood_group]' />
          <map key='[number_of_reviews]' value='[listings.csv].[number_of_reviews]' />
          <map key='[number_of_reviews_ltm]' value='[listings.csv].[number_of_reviews_ltm]' />
          <map key='[price]' value='[listings.csv].[price]' />
          <map key='[reviews_per_month]' value='[listings.csv].[reviews_per_month]' />
          <map key='[room_type]' value='[listings.csv].[room_type]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;pt_PT&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;€&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;pt_PT&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot; &quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[reviews.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;pt_PT&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;€&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;pt_PT&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot; &quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>name</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RPT' />
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>host_id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[host_id]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>host_id</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>host_name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[host_name]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>host_name</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RPT' />
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighbourhood_group</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighbourhood_group]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>neighbourhood_group</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RPT' />
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighbourhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighbourhood]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>neighbourhood</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RPT' />
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>room_type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[room_type]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>room_type</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RPT' />
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>20</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>price</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>minimum_nights</remote-name>
            <remote-type>20</remote-type>
            <local-name>[minimum_nights]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>minimum_nights</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>number_of_reviews</remote-name>
            <remote-type>20</remote-type>
            <local-name>[number_of_reviews]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>number_of_reviews</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>last_review</remote-name>
            <remote-type>133</remote-type>
            <local-name>[last_review]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>last_review</remote-alias>
            <ordinal>12</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews_per_month</remote-name>
            <remote-type>5</remote-type>
            <local-name>[reviews_per_month]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>reviews_per_month</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>calculated_host_listings_count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[calculated_host_listings_count]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>calculated_host_listings_count</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>availability_365</remote-name>
            <remote-type>20</remote-type>
            <local-name>[availability_365]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>availability_365</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>number_of_reviews_ltm</remote-name>
            <remote-type>20</remote-type>
            <local-name>[number_of_reviews_ltm]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>number_of_reviews_ltm</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>license</remote-name>
            <remote-type>129</remote-type>
            <local-name>[license]</local-name>
            <parent-name>[listings.csv]</parent-name>
            <remote-alias>license</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RPT' />
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighbourhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighbourhood (neighbourhoods.geojson)]</local-name>
            <parent-name>[neighbourhoods.geojson]</parent-name>
            <remote-alias>neighbourhood</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighbourhood_group</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighbourhood_group (neighbourhoods.geojson)]</local-name>
            <parent-name>[neighbourhoods.geojson]</parent-name>
            <remote-alias>neighbourhood_group</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Geometry</remote-name>
            <remote-type>8</remote-type>
            <local-name>[Geometry]</local-name>
            <parent-name>[neighbourhoods.geojson]</parent-name>
            <remote-alias>Geometry</remote-alias>
            <ordinal>20</ordinal>
            <local-type>spatial</local-type>
            <aggregation>Collect</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>listing_id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[listing_id]</local-name>
            <parent-name>[reviews.csv]</parent-name>
            <remote-alias>listing_id</remote-alias>
            <ordinal>21</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[reviews.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>22</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='contar IDs imoveis' datatype='integer' name='[Calculation_188025328715653123]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([id])' />
      </column>
      <column caption='Calculation1' datatype='real' name='[Calculation_188025328716656644]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Calculation_188025328715653123] = 1 THEN &quot;1&quot;&#13;&#10;ELSEIF [Calculation_188025328715653123] = 2 THEN &quot;2&quot;&#13;&#10;ELSEIF [Calculation_188025328715653123] = 3 THEN &quot;3&quot;&#13;&#10;ELSEIF [Calculation_188025328715653123] = 4 THEN &quot;4&quot;&#13;&#10;ELSEIF [Calculation_188025328715653123] = 5 THEN &quot;5&quot;&#13;&#10;ELSEIF [Calculation_188025328715653123] = 6 THEN &quot;6&quot;&#13;&#10;ELSEIF [Calculation_188025328715653123] = 7 THEN &quot;7&quot;&#13;&#10;ELSEIF [Calculation_188025328715653123] = 8 THEN &quot;8&quot;&#13;&#10;ELSEIF [Calculation_2200008461904420864] = 9 THEN &quot;9&quot;&#13;&#10;ELSE &quot;10+&quot;&#13;&#10;END' />
      </column>
      <column aggregation='None' caption='Price (bin)' datatype='integer' name='[Price (bin)]' role='dimension' type='ordinal'>
        <calculation class='bin' decimals='2' formula='[price]' peg='0' size='100' />
      </column>
      <column caption='listings.csv' datatype='table' name='[__tableau_internal_object_id__].[listings.csv_1E5969867C994B699AE9A6682E179FD1]' role='measure' type='quantitative' />
      <column caption='Availability 365' datatype='integer' name='[availability_365]' role='measure' type='quantitative' />
      <column caption='Calculated Host Listings Count' datatype='integer' name='[calculated_host_listings_count]' role='measure' type='quantitative' />
      <column aggregation='CountD' datatype='date' datatype-customized='true' name='[date]' role='dimension' type='ordinal' />
      <column caption='Host Id' datatype='integer' name='[host_id]' role='measure' type='quantitative' />
      <column caption='Host Name' datatype='string' name='[host_name]' role='dimension' type='nominal' />
      <column caption='Id' datatype='integer' name='[id]' role='measure' type='quantitative' />
      <column caption='Last Review' datatype='date' name='[last_review]' role='dimension' type='ordinal' />
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column caption='License' datatype='string' name='[license]' role='dimension' type='nominal' />
      <column caption='Listing Id' datatype='integer' name='[listing_id]' role='measure' type='quantitative' />
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='Minimum Nights' datatype='integer' name='[minimum_nights]' role='measure' type='quantitative' />
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
      <column caption='Neighbourhood (Neighbourhoods.Geojson)' datatype='string' name='[neighbourhood (neighbourhoods.geojson)]' role='dimension' type='nominal' />
      <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
      <column caption='Neighbourhood Group (Neighbourhoods.Geojson)' datatype='string' name='[neighbourhood_group (neighbourhoods.geojson)]' role='dimension' type='nominal' />
      <column caption='Neighbourhood Group' datatype='string' name='[neighbourhood_group]' role='dimension' type='nominal' />
      <column caption='Number Of Reviews' datatype='integer' name='[number_of_reviews]' role='measure' type='quantitative' />
      <column caption='Number Of Reviews Ltm' datatype='integer' name='[number_of_reviews_ltm]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Price' datatype='integer' name='[price]' role='dimension' type='ordinal' />
      <column caption='Reviews Per Month' datatype='real' name='[reviews_per_month]' role='dimension' type='quantitative' />
      <column caption='Room Type' datatype='string' name='[room_type]' role='dimension' type='nominal' />
      <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
      <column-instance column='[neighbourhood_group]' derivation='None' name='[none:neighbourhood_group:nk]' pivot='key' type='nominal' />
      <column-instance column='[room_type]' derivation='None' name='[none:room_type:nk]' pivot='key' type='nominal' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/maria/AppData/Local/Temp/TableauTemp/#TableauTemp_0ihcysl1p76pny1b6kjja04d4nwd.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='02/03/2025 06:41:56 PM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <cols>
            <map key='[Geometry]' value='[Extract].[Geometry]' />
            <map key='[availability_365]' value='[Extract].[availability_365]' />
            <map key='[calculated_host_listings_count]' value='[Extract].[calculated_host_listings_count]' />
            <map key='[date]' value='[Extract].[date]' />
            <map key='[host_id]' value='[Extract].[host_id]' />
            <map key='[host_name]' value='[Extract].[host_name]' />
            <map key='[id]' value='[Extract].[id]' />
            <map key='[last_review]' value='[Extract].[last_review]' />
            <map key='[latitude]' value='[Extract].[latitude]' />
            <map key='[license]' value='[Extract].[license]' />
            <map key='[listing_id]' value='[Extract].[listing_id]' />
            <map key='[longitude]' value='[Extract].[longitude]' />
            <map key='[minimum_nights]' value='[Extract].[minimum_nights]' />
            <map key='[name]' value='[Extract].[name]' />
            <map key='[neighbourhood (neighbourhoods.geojson)]' value='[Extract].[neighbourhood]' />
            <map key='[neighbourhood]' value='[Extract].[neighbourhood1]' />
            <map key='[neighbourhood_group (neighbourhoods.geojson)]' value='[Extract].[neighbourhood_group]' />
            <map key='[neighbourhood_group]' value='[Extract].[neighbourhood_group1]' />
            <map key='[number_of_reviews]' value='[Extract].[number_of_reviews]' />
            <map key='[number_of_reviews_ltm]' value='[Extract].[number_of_reviews_ltm]' />
            <map key='[price]' value='[Extract].[price]' />
            <map key='[reviews_per_month]' value='[Extract].[reviews_per_month]' />
            <map key='[room_type]' value='[Extract].[room_type]' />
          </cols>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>id</remote-name>
              <remote-type>20</remote-type>
              <local-name>[id]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>id</remote-alias>
              <ordinal>0</ordinal>
              <family>listings.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>53950</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>name</remote-alias>
              <ordinal>1</ordinal>
              <family>listings.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>52665</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RPT' />
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>host_id</remote-name>
              <remote-type>20</remote-type>
              <local-name>[host_id]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>host_id</remote-alias>
              <ordinal>2</ordinal>
              <family>listings.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>35083</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>host_name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[host_name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>host_name</remote-alias>
              <ordinal>3</ordinal>
              <family>listings.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>15172</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RPT' />
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>neighbourhood_group1</remote-name>
              <remote-type>129</remote-type>
              <local-name>[neighbourhood_group]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>neighbourhood_group1</remote-alias>
              <ordinal>4</ordinal>
              <family>listings.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RPT' />
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>neighbourhood1</remote-name>
              <remote-type>129</remote-type>
              <local-name>[neighbourhood]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>neighbourhood1</remote-alias>
              <ordinal>5</ordinal>
              <family>listings.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>495</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RPT' />
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>latitude</remote-name>
              <remote-type>5</remote-type>
              <local-name>[latitude]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>latitude</remote-alias>
              <ordinal>6</ordinal>
              <family>listings.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>42694</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>longitude</remote-name>
              <remote-type>5</remote-type>
              <local-name>[longitude]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>longitude</remote-alias>
              <ordinal>7</ordinal>
              <family>listings.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>37958</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>room_type</remote-name>
              <remote-type>129</remote-type>
              <local-name>[room_type]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>room_type</remote-alias>
              <ordinal>8</ordinal>
              <family>listings.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RPT' />
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>price</remote-name>
              <remote-type>20</remote-type>
              <local-name>[price]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>price</remote-alias>
              <ordinal>9</ordinal>
              <family>listings.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1535</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>minimum_nights</remote-name>
              <remote-type>20</remote-type>
              <local-name>[minimum_nights]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>minimum_nights</remote-alias>
              <ordinal>10</ordinal>
              <family>listings.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>70</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>number_of_reviews</remote-name>
              <remote-type>20</remote-type>
              <local-name>[number_of_reviews]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>number_of_reviews</remote-alias>
              <ordinal>11</ordinal>
              <family>listings.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>792</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>last_review</remote-name>
              <remote-type>133</remote-type>
              <local-name>[last_review]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>last_review</remote-alias>
              <ordinal>12</ordinal>
              <family>listings.csv</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>6679</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>reviews_per_month</remote-name>
              <remote-type>5</remote-type>
              <local-name>[reviews_per_month]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>reviews_per_month</remote-alias>
              <ordinal>13</ordinal>
              <family>listings.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1905</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>calculated_host_listings_count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[calculated_host_listings_count]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>calculated_host_listings_count</remote-alias>
              <ordinal>14</ordinal>
              <family>listings.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>167</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>availability_365</remote-name>
              <remote-type>20</remote-type>
              <local-name>[availability_365]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>availability_365</remote-alias>
              <ordinal>15</ordinal>
              <family>listings.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>556</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>number_of_reviews_ltm</remote-name>
              <remote-type>20</remote-type>
              <local-name>[number_of_reviews_ltm]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>number_of_reviews_ltm</remote-alias>
              <ordinal>16</ordinal>
              <family>listings.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>339</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>license</remote-name>
              <remote-type>129</remote-type>
              <local-name>[license]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>license</remote-alias>
              <ordinal>17</ordinal>
              <family>listings.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7491</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RPT' />
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>neighbourhood</remote-name>
              <remote-type>129</remote-type>
              <local-name>[neighbourhood (neighbourhoods.geojson)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>neighbourhood</remote-alias>
              <ordinal>18</ordinal>
              <family>neighbourhoods.geojson</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>495</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>neighbourhood_group</remote-name>
              <remote-type>129</remote-type>
              <local-name>[neighbourhood_group (neighbourhoods.geojson)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>neighbourhood_group</remote-alias>
              <ordinal>19</ordinal>
              <family>neighbourhoods.geojson</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Geometry</remote-name>
              <remote-type>128</remote-type>
              <local-name>[Geometry]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Geometry</remote-alias>
              <ordinal>20</ordinal>
              <family>neighbourhoods.geojson</family>
              <local-type>spatial</local-type>
              <aggregation>Collect</aggregation>
              <approx-count>498</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>listing_id</remote-name>
              <remote-type>20</remote-type>
              <local-name>[listing_id]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>listing_id</remote-alias>
              <ordinal>21</ordinal>
              <family>reviews.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>52552</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>date</remote-alias>
              <ordinal>22</ordinal>
              <family>reviews.csv</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>17272</approx-count>
              <contains-null>true</contains-null>
              <object-id>[listings.csv_1E5969867C994B699AE9A6682E179FD1]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:neighbourhood_group:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Bronx&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Staten Island&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Queens&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Manhattan&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>%null%</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Brooklyn&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:neighbourhood:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Bay Ridge&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bull&apos;s Head&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Concord&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eastchester&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jackson Heights&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Melrose&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;NoHo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Richmond Hill&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;St. Albans&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Wakefield&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Boerum Hill&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Claremont Village&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;DUMBO&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Flushing&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Highbridge&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Little Neck&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mount Hope&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Port Richmond&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Silver Lake&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Tribeca&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Woodhaven&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Arverne&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brighton Beach&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Co-op City&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;East Harlem&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Fort Hamilton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Howland Hook&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Manhattan Beach&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;New Brighton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Queens Village&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Ozone Park&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Upper East Side&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bayside&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Carroll Gardens&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Corona&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Eltingville&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Grant City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kensington&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Midwood&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Oakwood&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rockaway Beach&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sunnyside&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;West Village&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bay Terrace&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bushwick&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Concourse&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Edenwald&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Gowanus&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Middle Village&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nolita&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Richmondtown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;St. George&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Washington Heights&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Astoria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bronxdale&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cobble Hill&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;East Morrisania&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Fort Wadsworth&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Huguenot&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Marble Hill&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New Dorp&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Randall Manor&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Slope&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Upper West Side&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bensonhurst&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;City Island&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Douglaston&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Flatiron District&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Harlem&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lighthouse Hill&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mott Haven&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pelham Gardens&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sheepshead Bay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tottenville&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Willowbrook&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Allerton&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Borough Park&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Clason Point&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dyker Heights&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Fordham&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hollis&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Long Island City&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Murray Hill&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Prince&apos;s Bay&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;SoHo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Two Bridges&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Woodlawn&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bellerose&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Chelsea, Staten Island&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ditmars Steinway&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Financial District&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Greenwich Village&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kips Bay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Morris Park&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Parkchester&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Schuylerville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Todt Hill&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Williamsbridge&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bath Beach&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brooklyn Heights&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;College Point&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;East New York&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fresh Meadows&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hunts Point&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mariners Harbor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;New Dorp Beach&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Red Hook&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Springfield Gardens&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Van Nest&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bayswater&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Castle Hill&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Country Club&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Emerson Hill&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gravesend&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kew Gardens&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mill Basin&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Olinville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Roosevelt Island&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sunset Park&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Westchester Square&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bedford-Stuyvesant&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Castleton Corners&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Crown Heights&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Far Rockaway&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Great Kills&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kew Gardens Hills&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Morningside Heights&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ozone Park&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rosebank&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Theater District&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Westerleigh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belmont&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chinatown&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dongan Hills&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Flatbush&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Grymes Hill&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Laurelton&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Morrisania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Pelham Bay&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sea Gate&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tompkinsville&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Williamsburg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bergen Beach&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Civic Center&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Downtown Brooklyn&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Flatlands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hell&apos;s Kitchen&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Little Italy&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mount Eden&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Port Morris&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Shore Acres&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tremont&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Windsor Terrace&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bay Terrace, Staten Island&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cambria Heights&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Concourse Village&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Edgemere&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gramercy&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jamaica Estates&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Midland Beach&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;North Riverdale&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ridgewood&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Stapleton&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;West Brighton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Battery Park City&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brownsville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Columbia St&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;East Village&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gerritsen Beach&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Inwood&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Maspeth&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Springville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Rego Park&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Spuyten Duyvil&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Vinegar Hill&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Arden Heights&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Breezy Point&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Clifton&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;East Elmhurst&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Forest Hills&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Holliswood&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Longwood&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Navy Yard&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Prospect Heights&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Soundview&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Unionport&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Woodrow&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belle Harbor&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chelsea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cypress Hills&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Fieldston&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Greenpoint&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kingsbridge&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Morris Heights&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Park Slope&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rosedale&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Throgs Neck&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Whitestone&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Baychester&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Canarsie&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Coney Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Graniteville&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jamaica Hills&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Midtown&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Norwood&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Riverdale&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Stuyvesant Town&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;West Farms&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Arrochar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Briarwood&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Clinton Hill&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;East Flatbush&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Fort Greene&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Howard Beach&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lower East Side&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Neponsit&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Prospect-Lefferts Gardens&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Beach&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;University Heights&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Woodside&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:room_type:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Entire home/apt&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Shared room&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Private room&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hotel room&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Portugal&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='id' />
        <field-sort-custom-order field='Calculation_188025328716656644' />
        <field-sort-custom-order field='Calculation_188025328715653123' />
        <field-sort-custom-order field='Calculation_188025328703954946' />
        <field-sort-custom-order field='Calculation_2200008461904420864' />
        <field-sort-custom-order field='name' />
        <field-sort-custom-order field='host_id' />
        <field-sort-custom-order field='Calculation_1984398629741068293' />
        <field-sort-custom-order field='Calculation_1984398629739462658' />
        <field-sort-custom-order field='host_name' />
        <field-sort-custom-order field='neighbourhood_group' />
        <field-sort-custom-order field='neighbourhood' />
        <field-sort-custom-order field='latitude' />
        <field-sort-custom-order field='longitude' />
        <field-sort-custom-order field='room_type' />
        <field-sort-custom-order field='price' />
        <field-sort-custom-order field='minimum_nights' />
        <field-sort-custom-order field='number_of_reviews' />
        <field-sort-custom-order field='last_review' />
        <field-sort-custom-order field='reviews_per_month' />
        <field-sort-custom-order field='calculated_host_listings_count' />
        <field-sort-custom-order field='availability_365' />
        <field-sort-custom-order field='number_of_reviews_ltm' />
        <field-sort-custom-order field='license' />
        <field-sort-custom-order field='neighbourhood (neighbourhoods.geojson)' />
        <field-sort-custom-order field='neighbourhood_group (neighbourhoods.geojson)' />
        <field-sort-custom-order field='Geometry' />
        <field-sort-custom-order field='listing_id' />
        <field-sort-custom-order field='date' />
        <field-sort-custom-order field='Geometry (generated)' />
        <field-sort-custom-order field='Latitude (generated)' />
        <field-sort-custom-order field='Longitude (generated)' />
        <field-sort-custom-order field='Price (bin)' />
        <field-sort-custom-order field=':Measure Names' />
        <field-sort-custom-order field='Multiple Values' />
      </field-sort-info>
      <object-graph>
        <objects>
          <object caption='listings.csv' id='listings.csv_1E5969867C994B699AE9A6682E179FD1'>
            <properties context=''>
              <relation join='full' type='join'>
                <clause type='join'>
                  <expression op='='>
                    <expression op='[listings.csv].[id]' />
                    <expression op='[reviews.csv].[listing_id]' />
                  </expression>
                </clause>
                <relation join='full' type='join'>
                  <clause type='join'>
                    <expression op='='>
                      <expression op='[listings.csv].[neighbourhood]' />
                      <expression op='[neighbourhoods.geojson].[neighbourhood]' />
                    </expression>
                  </clause>
                  <relation connection='textscan.1abvozo0btl1xd13ckpac1y9iu6n' name='listings.csv' table='[listings#csv]' type='table'>
                    <columns character-set='UTF-8' header='yes' locale='pt_PT'>
                      <column datatype='integer' name='id' ordinal='0' />
                      <column datatype='string' name='name' ordinal='1' />
                      <column datatype='integer' name='host_id' ordinal='2' />
                      <column datatype='string' name='host_name' ordinal='3' />
                      <column datatype='string' name='neighbourhood_group' ordinal='4' />
                      <column datatype='string' name='neighbourhood' ordinal='5' />
                      <column datatype='real' name='latitude' ordinal='6' />
                      <column datatype='real' name='longitude' ordinal='7' />
                      <column datatype='string' name='room_type' ordinal='8' />
                      <column datatype='integer' name='price' ordinal='9' />
                      <column datatype='integer' name='minimum_nights' ordinal='10' />
                      <column datatype='integer' name='number_of_reviews' ordinal='11' />
                      <column datatype='date' name='last_review' ordinal='12' />
                      <column datatype='real' name='reviews_per_month' ordinal='13' />
                      <column datatype='integer' name='calculated_host_listings_count' ordinal='14' />
                      <column datatype='integer' name='availability_365' ordinal='15' />
                      <column datatype='integer' name='number_of_reviews_ltm' ordinal='16' />
                      <column datatype='string' name='license' ordinal='17' />
                    </columns>
                  </relation>
                  <relation connection='ogrdirect.09j1es70wot3oz14de1a90amkpu2' name='neighbourhoods.geojson' table='[neighbourhoods.geojson]' type='table'>
                    <columns>
                      <column datatype='string' name='neighbourhood' ordinal='0' />
                      <column datatype='string' name='neighbourhood_group' ordinal='1' />
                      <column datatype='spatial' name='Geometry' ordinal='2' />
                    </columns>
                  </relation>
                </relation>
                <relation connection='textscan.02ykuag13pvqcm14s82490zctojs' name='reviews.csv' table='[reviews#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='pt_PT'>
                    <column datatype='integer' name='listing_id' ordinal='0' />
                    <column datatype='date' name='date' ordinal='1' />
                  </columns>
                </relation>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1_0ED1A00C151248F882D0254AECF35E24]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Sheet 4' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Room Type' />
        <param name='target' value='Sheet 4' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text />
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='neighbourhoods' name='federated.1084i8c0f57s1e14ytlmd11ds3q9' />
            <datasource caption='listings.csv+ (Multiple Connections)' name='federated.0ru8wam18lyyhe129e16g0307lb4' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0ru8wam18lyyhe129e16g0307lb4'>
            <column-instance column='[price]' derivation='Avg' name='[avg:price:qk]' pivot='key' type='quantitative' />
            <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
            <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
            <column-instance column='[price]' derivation='None' name='[none:price:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Price' datatype='integer' name='[price]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1084i8c0f57s1e14ytlmd11ds3q9'>
            <column datatype='spatial' name='[Geometry]' role='measure' type='nominal' />
            <column-instance column='[Geometry]' derivation='Collect' name='[clct:Geometry:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:neighbourhood:nk]' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Fort Wadsworth&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:price:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:price:ok]' member='8' />
              <groupfilter function='member' level='[none:price:ok]' member='10' />
              <groupfilter function='member' level='[none:price:ok]' member='20' />
              <groupfilter function='member' level='[none:price:ok]' member='21' />
              <groupfilter function='member' level='[none:price:ok]' member='22' />
              <groupfilter function='member' level='[none:price:ok]' member='24' />
              <groupfilter function='member' level='[none:price:ok]' member='25' />
              <groupfilter function='member' level='[none:price:ok]' member='26' />
              <groupfilter function='member' level='[none:price:ok]' member='27' />
              <groupfilter function='member' level='[none:price:ok]' member='28' />
              <groupfilter function='member' level='[none:price:ok]' member='29' />
              <groupfilter function='member' level='[none:price:ok]' member='30' />
              <groupfilter function='member' level='[none:price:ok]' member='31' />
              <groupfilter function='member' level='[none:price:ok]' member='32' />
              <groupfilter function='member' level='[none:price:ok]' member='33' />
              <groupfilter function='member' level='[none:price:ok]' member='34' />
              <groupfilter function='member' level='[none:price:ok]' member='35' />
              <groupfilter function='member' level='[none:price:ok]' member='36' />
              <groupfilter function='member' level='[none:price:ok]' member='37' />
              <groupfilter function='member' level='[none:price:ok]' member='38' />
              <groupfilter function='member' level='[none:price:ok]' member='39' />
              <groupfilter function='member' level='[none:price:ok]' member='40' />
              <groupfilter function='member' level='[none:price:ok]' member='41' />
              <groupfilter function='member' level='[none:price:ok]' member='42' />
              <groupfilter function='member' level='[none:price:ok]' member='43' />
              <groupfilter function='member' level='[none:price:ok]' member='44' />
              <groupfilter function='member' level='[none:price:ok]' member='45' />
              <groupfilter function='member' level='[none:price:ok]' member='46' />
              <groupfilter function='member' level='[none:price:ok]' member='47' />
              <groupfilter function='member' level='[none:price:ok]' member='48' />
              <groupfilter function='member' level='[none:price:ok]' member='49' />
              <groupfilter function='member' level='[none:price:ok]' member='50' />
              <groupfilter function='member' level='[none:price:ok]' member='51' />
              <groupfilter function='member' level='[none:price:ok]' member='52' />
              <groupfilter function='member' level='[none:price:ok]' member='53' />
              <groupfilter function='member' level='[none:price:ok]' member='54' />
              <groupfilter function='member' level='[none:price:ok]' member='55' />
              <groupfilter function='member' level='[none:price:ok]' member='56' />
              <groupfilter function='member' level='[none:price:ok]' member='57' />
              <groupfilter function='member' level='[none:price:ok]' member='58' />
              <groupfilter function='member' level='[none:price:ok]' member='59' />
              <groupfilter function='member' level='[none:price:ok]' member='60' />
              <groupfilter function='member' level='[none:price:ok]' member='61' />
              <groupfilter function='member' level='[none:price:ok]' member='62' />
              <groupfilter function='member' level='[none:price:ok]' member='63' />
              <groupfilter function='member' level='[none:price:ok]' member='64' />
              <groupfilter function='member' level='[none:price:ok]' member='65' />
              <groupfilter function='member' level='[none:price:ok]' member='66' />
              <groupfilter function='member' level='[none:price:ok]' member='67' />
              <groupfilter function='member' level='[none:price:ok]' member='68' />
              <groupfilter function='member' level='[none:price:ok]' member='69' />
              <groupfilter function='member' level='[none:price:ok]' member='70' />
              <groupfilter function='member' level='[none:price:ok]' member='71' />
              <groupfilter function='member' level='[none:price:ok]' member='72' />
              <groupfilter function='member' level='[none:price:ok]' member='73' />
              <groupfilter function='member' level='[none:price:ok]' member='74' />
              <groupfilter function='member' level='[none:price:ok]' member='75' />
              <groupfilter function='member' level='[none:price:ok]' member='76' />
              <groupfilter function='member' level='[none:price:ok]' member='77' />
              <groupfilter function='member' level='[none:price:ok]' member='78' />
              <groupfilter function='member' level='[none:price:ok]' member='79' />
              <groupfilter function='member' level='[none:price:ok]' member='80' />
              <groupfilter function='member' level='[none:price:ok]' member='81' />
              <groupfilter function='member' level='[none:price:ok]' member='82' />
              <groupfilter function='member' level='[none:price:ok]' member='83' />
              <groupfilter function='member' level='[none:price:ok]' member='84' />
              <groupfilter function='member' level='[none:price:ok]' member='85' />
              <groupfilter function='member' level='[none:price:ok]' member='86' />
              <groupfilter function='member' level='[none:price:ok]' member='87' />
              <groupfilter function='member' level='[none:price:ok]' member='88' />
              <groupfilter function='member' level='[none:price:ok]' member='89' />
              <groupfilter function='member' level='[none:price:ok]' member='90' />
              <groupfilter function='member' level='[none:price:ok]' member='91' />
              <groupfilter function='member' level='[none:price:ok]' member='92' />
              <groupfilter function='member' level='[none:price:ok]' member='93' />
              <groupfilter function='member' level='[none:price:ok]' member='94' />
              <groupfilter function='member' level='[none:price:ok]' member='95' />
              <groupfilter function='member' level='[none:price:ok]' member='96' />
              <groupfilter function='member' level='[none:price:ok]' member='97' />
              <groupfilter function='member' level='[none:price:ok]' member='98' />
              <groupfilter function='member' level='[none:price:ok]' member='99' />
              <groupfilter function='member' level='[none:price:ok]' member='100' />
              <groupfilter function='member' level='[none:price:ok]' member='101' />
              <groupfilter function='member' level='[none:price:ok]' member='102' />
              <groupfilter function='member' level='[none:price:ok]' member='103' />
              <groupfilter function='member' level='[none:price:ok]' member='104' />
              <groupfilter function='member' level='[none:price:ok]' member='105' />
              <groupfilter function='member' level='[none:price:ok]' member='106' />
              <groupfilter function='member' level='[none:price:ok]' member='107' />
              <groupfilter function='member' level='[none:price:ok]' member='108' />
              <groupfilter function='member' level='[none:price:ok]' member='109' />
              <groupfilter function='member' level='[none:price:ok]' member='110' />
              <groupfilter function='member' level='[none:price:ok]' member='111' />
              <groupfilter function='member' level='[none:price:ok]' member='112' />
              <groupfilter function='member' level='[none:price:ok]' member='113' />
              <groupfilter function='member' level='[none:price:ok]' member='114' />
              <groupfilter function='member' level='[none:price:ok]' member='115' />
              <groupfilter function='member' level='[none:price:ok]' member='116' />
              <groupfilter function='member' level='[none:price:ok]' member='117' />
              <groupfilter function='member' level='[none:price:ok]' member='118' />
              <groupfilter function='member' level='[none:price:ok]' member='119' />
              <groupfilter function='member' level='[none:price:ok]' member='120' />
              <groupfilter function='member' level='[none:price:ok]' member='121' />
              <groupfilter function='member' level='[none:price:ok]' member='122' />
              <groupfilter function='member' level='[none:price:ok]' member='123' />
              <groupfilter function='member' level='[none:price:ok]' member='124' />
              <groupfilter function='member' level='[none:price:ok]' member='125' />
              <groupfilter function='member' level='[none:price:ok]' member='126' />
              <groupfilter function='member' level='[none:price:ok]' member='127' />
              <groupfilter function='member' level='[none:price:ok]' member='128' />
              <groupfilter function='member' level='[none:price:ok]' member='129' />
              <groupfilter function='member' level='[none:price:ok]' member='130' />
              <groupfilter function='member' level='[none:price:ok]' member='131' />
              <groupfilter function='member' level='[none:price:ok]' member='132' />
              <groupfilter function='member' level='[none:price:ok]' member='133' />
              <groupfilter function='member' level='[none:price:ok]' member='134' />
              <groupfilter function='member' level='[none:price:ok]' member='135' />
              <groupfilter function='member' level='[none:price:ok]' member='136' />
              <groupfilter function='member' level='[none:price:ok]' member='137' />
              <groupfilter function='member' level='[none:price:ok]' member='138' />
              <groupfilter function='member' level='[none:price:ok]' member='139' />
              <groupfilter function='member' level='[none:price:ok]' member='140' />
              <groupfilter function='member' level='[none:price:ok]' member='141' />
              <groupfilter function='member' level='[none:price:ok]' member='142' />
              <groupfilter function='member' level='[none:price:ok]' member='143' />
              <groupfilter function='member' level='[none:price:ok]' member='144' />
              <groupfilter function='member' level='[none:price:ok]' member='145' />
              <groupfilter function='member' level='[none:price:ok]' member='146' />
              <groupfilter function='member' level='[none:price:ok]' member='147' />
              <groupfilter function='member' level='[none:price:ok]' member='148' />
              <groupfilter function='member' level='[none:price:ok]' member='149' />
              <groupfilter function='member' level='[none:price:ok]' member='150' />
              <groupfilter function='member' level='[none:price:ok]' member='151' />
              <groupfilter function='member' level='[none:price:ok]' member='152' />
              <groupfilter function='member' level='[none:price:ok]' member='153' />
              <groupfilter function='member' level='[none:price:ok]' member='154' />
              <groupfilter function='member' level='[none:price:ok]' member='155' />
              <groupfilter function='member' level='[none:price:ok]' member='156' />
              <groupfilter function='member' level='[none:price:ok]' member='157' />
              <groupfilter function='member' level='[none:price:ok]' member='158' />
              <groupfilter function='member' level='[none:price:ok]' member='159' />
              <groupfilter function='member' level='[none:price:ok]' member='160' />
              <groupfilter function='member' level='[none:price:ok]' member='161' />
              <groupfilter function='member' level='[none:price:ok]' member='162' />
              <groupfilter function='member' level='[none:price:ok]' member='163' />
              <groupfilter function='member' level='[none:price:ok]' member='164' />
              <groupfilter function='member' level='[none:price:ok]' member='165' />
              <groupfilter function='member' level='[none:price:ok]' member='166' />
              <groupfilter function='member' level='[none:price:ok]' member='167' />
              <groupfilter function='member' level='[none:price:ok]' member='168' />
              <groupfilter function='member' level='[none:price:ok]' member='169' />
              <groupfilter function='member' level='[none:price:ok]' member='170' />
              <groupfilter function='member' level='[none:price:ok]' member='171' />
              <groupfilter function='member' level='[none:price:ok]' member='172' />
              <groupfilter function='member' level='[none:price:ok]' member='173' />
              <groupfilter function='member' level='[none:price:ok]' member='174' />
              <groupfilter function='member' level='[none:price:ok]' member='175' />
              <groupfilter function='member' level='[none:price:ok]' member='176' />
              <groupfilter function='member' level='[none:price:ok]' member='177' />
              <groupfilter function='member' level='[none:price:ok]' member='178' />
              <groupfilter function='member' level='[none:price:ok]' member='179' />
              <groupfilter function='member' level='[none:price:ok]' member='180' />
              <groupfilter function='member' level='[none:price:ok]' member='181' />
              <groupfilter function='member' level='[none:price:ok]' member='182' />
              <groupfilter function='member' level='[none:price:ok]' member='183' />
              <groupfilter function='member' level='[none:price:ok]' member='184' />
              <groupfilter function='member' level='[none:price:ok]' member='185' />
              <groupfilter function='member' level='[none:price:ok]' member='186' />
              <groupfilter function='member' level='[none:price:ok]' member='187' />
              <groupfilter function='member' level='[none:price:ok]' member='188' />
              <groupfilter function='member' level='[none:price:ok]' member='189' />
              <groupfilter function='member' level='[none:price:ok]' member='190' />
              <groupfilter function='member' level='[none:price:ok]' member='191' />
              <groupfilter function='member' level='[none:price:ok]' member='192' />
              <groupfilter function='member' level='[none:price:ok]' member='193' />
              <groupfilter function='member' level='[none:price:ok]' member='194' />
              <groupfilter function='member' level='[none:price:ok]' member='195' />
              <groupfilter function='member' level='[none:price:ok]' member='196' />
              <groupfilter function='member' level='[none:price:ok]' member='197' />
              <groupfilter function='member' level='[none:price:ok]' member='198' />
              <groupfilter function='member' level='[none:price:ok]' member='199' />
              <groupfilter function='member' level='[none:price:ok]' member='200' />
              <groupfilter function='member' level='[none:price:ok]' member='201' />
              <groupfilter function='member' level='[none:price:ok]' member='202' />
              <groupfilter function='member' level='[none:price:ok]' member='203' />
              <groupfilter function='member' level='[none:price:ok]' member='204' />
              <groupfilter function='member' level='[none:price:ok]' member='205' />
              <groupfilter function='member' level='[none:price:ok]' member='206' />
              <groupfilter function='member' level='[none:price:ok]' member='207' />
              <groupfilter function='member' level='[none:price:ok]' member='208' />
              <groupfilter function='member' level='[none:price:ok]' member='209' />
              <groupfilter function='member' level='[none:price:ok]' member='210' />
              <groupfilter function='member' level='[none:price:ok]' member='211' />
              <groupfilter function='member' level='[none:price:ok]' member='212' />
              <groupfilter function='member' level='[none:price:ok]' member='213' />
              <groupfilter function='member' level='[none:price:ok]' member='214' />
              <groupfilter function='member' level='[none:price:ok]' member='215' />
              <groupfilter function='member' level='[none:price:ok]' member='216' />
              <groupfilter function='member' level='[none:price:ok]' member='217' />
              <groupfilter function='member' level='[none:price:ok]' member='218' />
              <groupfilter function='member' level='[none:price:ok]' member='219' />
              <groupfilter function='member' level='[none:price:ok]' member='220' />
              <groupfilter function='member' level='[none:price:ok]' member='221' />
              <groupfilter function='member' level='[none:price:ok]' member='222' />
              <groupfilter function='member' level='[none:price:ok]' member='223' />
              <groupfilter function='member' level='[none:price:ok]' member='224' />
              <groupfilter function='member' level='[none:price:ok]' member='225' />
              <groupfilter function='member' level='[none:price:ok]' member='226' />
              <groupfilter function='member' level='[none:price:ok]' member='227' />
              <groupfilter function='member' level='[none:price:ok]' member='228' />
              <groupfilter function='member' level='[none:price:ok]' member='229' />
              <groupfilter function='member' level='[none:price:ok]' member='230' />
              <groupfilter function='member' level='[none:price:ok]' member='231' />
              <groupfilter function='member' level='[none:price:ok]' member='232' />
              <groupfilter function='member' level='[none:price:ok]' member='233' />
              <groupfilter function='member' level='[none:price:ok]' member='234' />
              <groupfilter function='member' level='[none:price:ok]' member='235' />
              <groupfilter function='member' level='[none:price:ok]' member='236' />
              <groupfilter function='member' level='[none:price:ok]' member='237' />
              <groupfilter function='member' level='[none:price:ok]' member='238' />
              <groupfilter function='member' level='[none:price:ok]' member='239' />
              <groupfilter function='member' level='[none:price:ok]' member='240' />
              <groupfilter function='member' level='[none:price:ok]' member='241' />
              <groupfilter function='member' level='[none:price:ok]' member='242' />
              <groupfilter function='member' level='[none:price:ok]' member='243' />
              <groupfilter function='member' level='[none:price:ok]' member='244' />
              <groupfilter function='member' level='[none:price:ok]' member='245' />
              <groupfilter function='member' level='[none:price:ok]' member='246' />
              <groupfilter function='member' level='[none:price:ok]' member='247' />
              <groupfilter function='member' level='[none:price:ok]' member='248' />
              <groupfilter function='member' level='[none:price:ok]' member='249' />
              <groupfilter function='member' level='[none:price:ok]' member='250' />
              <groupfilter function='member' level='[none:price:ok]' member='251' />
              <groupfilter function='member' level='[none:price:ok]' member='252' />
              <groupfilter function='member' level='[none:price:ok]' member='253' />
              <groupfilter function='member' level='[none:price:ok]' member='254' />
              <groupfilter function='member' level='[none:price:ok]' member='255' />
              <groupfilter function='member' level='[none:price:ok]' member='256' />
              <groupfilter function='member' level='[none:price:ok]' member='257' />
              <groupfilter function='member' level='[none:price:ok]' member='258' />
              <groupfilter function='member' level='[none:price:ok]' member='259' />
              <groupfilter function='member' level='[none:price:ok]' member='260' />
              <groupfilter function='member' level='[none:price:ok]' member='261' />
              <groupfilter function='member' level='[none:price:ok]' member='262' />
              <groupfilter function='member' level='[none:price:ok]' member='263' />
              <groupfilter function='member' level='[none:price:ok]' member='264' />
              <groupfilter function='member' level='[none:price:ok]' member='265' />
              <groupfilter function='member' level='[none:price:ok]' member='266' />
              <groupfilter function='member' level='[none:price:ok]' member='267' />
              <groupfilter function='member' level='[none:price:ok]' member='268' />
              <groupfilter function='member' level='[none:price:ok]' member='269' />
              <groupfilter function='member' level='[none:price:ok]' member='270' />
              <groupfilter function='member' level='[none:price:ok]' member='271' />
              <groupfilter function='member' level='[none:price:ok]' member='272' />
              <groupfilter function='member' level='[none:price:ok]' member='273' />
              <groupfilter function='member' level='[none:price:ok]' member='274' />
              <groupfilter function='member' level='[none:price:ok]' member='275' />
              <groupfilter function='member' level='[none:price:ok]' member='276' />
              <groupfilter function='member' level='[none:price:ok]' member='277' />
              <groupfilter function='member' level='[none:price:ok]' member='278' />
              <groupfilter function='member' level='[none:price:ok]' member='279' />
              <groupfilter function='member' level='[none:price:ok]' member='280' />
              <groupfilter function='member' level='[none:price:ok]' member='281' />
              <groupfilter function='member' level='[none:price:ok]' member='282' />
              <groupfilter function='member' level='[none:price:ok]' member='283' />
              <groupfilter function='member' level='[none:price:ok]' member='284' />
              <groupfilter function='member' level='[none:price:ok]' member='285' />
              <groupfilter function='member' level='[none:price:ok]' member='286' />
              <groupfilter function='member' level='[none:price:ok]' member='287' />
              <groupfilter function='member' level='[none:price:ok]' member='288' />
              <groupfilter function='member' level='[none:price:ok]' member='289' />
              <groupfilter function='member' level='[none:price:ok]' member='290' />
              <groupfilter function='member' level='[none:price:ok]' member='291' />
              <groupfilter function='member' level='[none:price:ok]' member='292' />
              <groupfilter function='member' level='[none:price:ok]' member='293' />
              <groupfilter function='member' level='[none:price:ok]' member='294' />
              <groupfilter function='member' level='[none:price:ok]' member='295' />
              <groupfilter function='member' level='[none:price:ok]' member='296' />
              <groupfilter function='member' level='[none:price:ok]' member='297' />
              <groupfilter function='member' level='[none:price:ok]' member='298' />
              <groupfilter function='member' level='[none:price:ok]' member='299' />
              <groupfilter function='member' level='[none:price:ok]' member='300' />
              <groupfilter function='member' level='[none:price:ok]' member='301' />
              <groupfilter function='member' level='[none:price:ok]' member='302' />
              <groupfilter function='member' level='[none:price:ok]' member='303' />
              <groupfilter function='member' level='[none:price:ok]' member='304' />
              <groupfilter function='member' level='[none:price:ok]' member='305' />
              <groupfilter function='member' level='[none:price:ok]' member='306' />
              <groupfilter function='member' level='[none:price:ok]' member='307' />
              <groupfilter function='member' level='[none:price:ok]' member='308' />
              <groupfilter function='member' level='[none:price:ok]' member='309' />
              <groupfilter function='member' level='[none:price:ok]' member='310' />
              <groupfilter function='member' level='[none:price:ok]' member='311' />
              <groupfilter function='member' level='[none:price:ok]' member='312' />
              <groupfilter function='member' level='[none:price:ok]' member='313' />
              <groupfilter function='member' level='[none:price:ok]' member='314' />
              <groupfilter function='member' level='[none:price:ok]' member='315' />
              <groupfilter function='member' level='[none:price:ok]' member='316' />
              <groupfilter function='member' level='[none:price:ok]' member='317' />
              <groupfilter function='member' level='[none:price:ok]' member='318' />
              <groupfilter function='member' level='[none:price:ok]' member='319' />
              <groupfilter function='member' level='[none:price:ok]' member='320' />
              <groupfilter function='member' level='[none:price:ok]' member='321' />
              <groupfilter function='member' level='[none:price:ok]' member='322' />
              <groupfilter function='member' level='[none:price:ok]' member='323' />
              <groupfilter function='member' level='[none:price:ok]' member='324' />
              <groupfilter function='member' level='[none:price:ok]' member='325' />
              <groupfilter function='member' level='[none:price:ok]' member='326' />
              <groupfilter function='member' level='[none:price:ok]' member='327' />
              <groupfilter function='member' level='[none:price:ok]' member='328' />
              <groupfilter function='member' level='[none:price:ok]' member='329' />
              <groupfilter function='member' level='[none:price:ok]' member='330' />
              <groupfilter function='member' level='[none:price:ok]' member='331' />
              <groupfilter function='member' level='[none:price:ok]' member='332' />
              <groupfilter function='member' level='[none:price:ok]' member='333' />
              <groupfilter function='member' level='[none:price:ok]' member='334' />
              <groupfilter function='member' level='[none:price:ok]' member='335' />
              <groupfilter function='member' level='[none:price:ok]' member='336' />
              <groupfilter function='member' level='[none:price:ok]' member='337' />
              <groupfilter function='member' level='[none:price:ok]' member='338' />
              <groupfilter function='member' level='[none:price:ok]' member='339' />
              <groupfilter function='member' level='[none:price:ok]' member='340' />
              <groupfilter function='member' level='[none:price:ok]' member='341' />
              <groupfilter function='member' level='[none:price:ok]' member='342' />
              <groupfilter function='member' level='[none:price:ok]' member='343' />
              <groupfilter function='member' level='[none:price:ok]' member='344' />
              <groupfilter function='member' level='[none:price:ok]' member='345' />
              <groupfilter function='member' level='[none:price:ok]' member='346' />
              <groupfilter function='member' level='[none:price:ok]' member='347' />
              <groupfilter function='member' level='[none:price:ok]' member='348' />
              <groupfilter function='member' level='[none:price:ok]' member='349' />
              <groupfilter function='member' level='[none:price:ok]' member='350' />
              <groupfilter function='member' level='[none:price:ok]' member='351' />
              <groupfilter function='member' level='[none:price:ok]' member='352' />
              <groupfilter function='member' level='[none:price:ok]' member='353' />
              <groupfilter function='member' level='[none:price:ok]' member='354' />
              <groupfilter function='member' level='[none:price:ok]' member='355' />
              <groupfilter function='member' level='[none:price:ok]' member='356' />
              <groupfilter function='member' level='[none:price:ok]' member='357' />
              <groupfilter function='member' level='[none:price:ok]' member='358' />
              <groupfilter function='member' level='[none:price:ok]' member='359' />
              <groupfilter function='member' level='[none:price:ok]' member='360' />
              <groupfilter function='member' level='[none:price:ok]' member='361' />
              <groupfilter function='member' level='[none:price:ok]' member='362' />
              <groupfilter function='member' level='[none:price:ok]' member='363' />
              <groupfilter function='member' level='[none:price:ok]' member='364' />
              <groupfilter function='member' level='[none:price:ok]' member='365' />
              <groupfilter function='member' level='[none:price:ok]' member='366' />
              <groupfilter function='member' level='[none:price:ok]' member='367' />
              <groupfilter function='member' level='[none:price:ok]' member='368' />
              <groupfilter function='member' level='[none:price:ok]' member='369' />
              <groupfilter function='member' level='[none:price:ok]' member='370' />
              <groupfilter function='member' level='[none:price:ok]' member='371' />
              <groupfilter function='member' level='[none:price:ok]' member='372' />
              <groupfilter function='member' level='[none:price:ok]' member='373' />
              <groupfilter function='member' level='[none:price:ok]' member='374' />
              <groupfilter function='member' level='[none:price:ok]' member='375' />
              <groupfilter function='member' level='[none:price:ok]' member='376' />
              <groupfilter function='member' level='[none:price:ok]' member='377' />
              <groupfilter function='member' level='[none:price:ok]' member='378' />
              <groupfilter function='member' level='[none:price:ok]' member='379' />
              <groupfilter function='member' level='[none:price:ok]' member='380' />
              <groupfilter function='member' level='[none:price:ok]' member='381' />
              <groupfilter function='member' level='[none:price:ok]' member='382' />
              <groupfilter function='member' level='[none:price:ok]' member='383' />
              <groupfilter function='member' level='[none:price:ok]' member='384' />
              <groupfilter function='member' level='[none:price:ok]' member='385' />
              <groupfilter function='member' level='[none:price:ok]' member='386' />
              <groupfilter function='member' level='[none:price:ok]' member='387' />
              <groupfilter function='member' level='[none:price:ok]' member='388' />
              <groupfilter function='member' level='[none:price:ok]' member='389' />
              <groupfilter function='member' level='[none:price:ok]' member='390' />
              <groupfilter function='member' level='[none:price:ok]' member='391' />
              <groupfilter function='member' level='[none:price:ok]' member='392' />
              <groupfilter function='member' level='[none:price:ok]' member='393' />
              <groupfilter function='member' level='[none:price:ok]' member='394' />
              <groupfilter function='member' level='[none:price:ok]' member='395' />
              <groupfilter function='member' level='[none:price:ok]' member='396' />
              <groupfilter function='member' level='[none:price:ok]' member='397' />
              <groupfilter function='member' level='[none:price:ok]' member='398' />
              <groupfilter function='member' level='[none:price:ok]' member='399' />
              <groupfilter function='member' level='[none:price:ok]' member='400' />
              <groupfilter function='member' level='[none:price:ok]' member='401' />
              <groupfilter function='member' level='[none:price:ok]' member='402' />
              <groupfilter function='member' level='[none:price:ok]' member='403' />
              <groupfilter function='member' level='[none:price:ok]' member='404' />
              <groupfilter function='member' level='[none:price:ok]' member='405' />
              <groupfilter function='member' level='[none:price:ok]' member='406' />
              <groupfilter function='member' level='[none:price:ok]' member='407' />
              <groupfilter function='member' level='[none:price:ok]' member='408' />
              <groupfilter function='member' level='[none:price:ok]' member='409' />
              <groupfilter function='member' level='[none:price:ok]' member='410' />
              <groupfilter function='member' level='[none:price:ok]' member='411' />
              <groupfilter function='member' level='[none:price:ok]' member='412' />
              <groupfilter function='member' level='[none:price:ok]' member='413' />
              <groupfilter function='member' level='[none:price:ok]' member='414' />
              <groupfilter function='member' level='[none:price:ok]' member='415' />
              <groupfilter function='member' level='[none:price:ok]' member='416' />
              <groupfilter function='member' level='[none:price:ok]' member='418' />
              <groupfilter function='member' level='[none:price:ok]' member='420' />
              <groupfilter function='member' level='[none:price:ok]' member='421' />
              <groupfilter function='member' level='[none:price:ok]' member='422' />
              <groupfilter function='member' level='[none:price:ok]' member='424' />
              <groupfilter function='member' level='[none:price:ok]' member='425' />
              <groupfilter function='member' level='[none:price:ok]' member='426' />
              <groupfilter function='member' level='[none:price:ok]' member='427' />
              <groupfilter function='member' level='[none:price:ok]' member='428' />
              <groupfilter function='member' level='[none:price:ok]' member='429' />
              <groupfilter function='member' level='[none:price:ok]' member='430' />
              <groupfilter function='member' level='[none:price:ok]' member='431' />
              <groupfilter function='member' level='[none:price:ok]' member='432' />
              <groupfilter function='member' level='[none:price:ok]' member='433' />
              <groupfilter function='member' level='[none:price:ok]' member='434' />
              <groupfilter function='member' level='[none:price:ok]' member='435' />
              <groupfilter function='member' level='[none:price:ok]' member='436' />
              <groupfilter function='member' level='[none:price:ok]' member='437' />
              <groupfilter function='member' level='[none:price:ok]' member='438' />
              <groupfilter function='member' level='[none:price:ok]' member='439' />
              <groupfilter function='member' level='[none:price:ok]' member='440' />
              <groupfilter function='member' level='[none:price:ok]' member='441' />
              <groupfilter function='member' level='[none:price:ok]' member='442' />
              <groupfilter function='member' level='[none:price:ok]' member='443' />
              <groupfilter function='member' level='[none:price:ok]' member='444' />
              <groupfilter function='member' level='[none:price:ok]' member='445' />
              <groupfilter function='member' level='[none:price:ok]' member='446' />
              <groupfilter function='member' level='[none:price:ok]' member='447' />
              <groupfilter function='member' level='[none:price:ok]' member='448' />
              <groupfilter function='member' level='[none:price:ok]' member='449' />
              <groupfilter function='member' level='[none:price:ok]' member='450' />
              <groupfilter function='member' level='[none:price:ok]' member='451' />
              <groupfilter function='member' level='[none:price:ok]' member='452' />
              <groupfilter function='member' level='[none:price:ok]' member='453' />
              <groupfilter function='member' level='[none:price:ok]' member='454' />
              <groupfilter function='member' level='[none:price:ok]' member='455' />
              <groupfilter function='member' level='[none:price:ok]' member='456' />
              <groupfilter function='member' level='[none:price:ok]' member='457' />
              <groupfilter function='member' level='[none:price:ok]' member='458' />
              <groupfilter function='member' level='[none:price:ok]' member='459' />
              <groupfilter function='member' level='[none:price:ok]' member='460' />
              <groupfilter function='member' level='[none:price:ok]' member='461' />
              <groupfilter function='member' level='[none:price:ok]' member='462' />
              <groupfilter function='member' level='[none:price:ok]' member='463' />
              <groupfilter function='member' level='[none:price:ok]' member='464' />
              <groupfilter function='member' level='[none:price:ok]' member='466' />
              <groupfilter function='member' level='[none:price:ok]' member='467' />
              <groupfilter function='member' level='[none:price:ok]' member='468' />
              <groupfilter function='member' level='[none:price:ok]' member='469' />
              <groupfilter function='member' level='[none:price:ok]' member='470' />
              <groupfilter function='member' level='[none:price:ok]' member='471' />
              <groupfilter function='member' level='[none:price:ok]' member='472' />
              <groupfilter function='member' level='[none:price:ok]' member='473' />
              <groupfilter function='member' level='[none:price:ok]' member='474' />
              <groupfilter function='member' level='[none:price:ok]' member='475' />
              <groupfilter function='member' level='[none:price:ok]' member='476' />
              <groupfilter function='member' level='[none:price:ok]' member='477' />
              <groupfilter function='member' level='[none:price:ok]' member='478' />
              <groupfilter function='member' level='[none:price:ok]' member='479' />
              <groupfilter function='member' level='[none:price:ok]' member='480' />
              <groupfilter function='member' level='[none:price:ok]' member='481' />
              <groupfilter function='member' level='[none:price:ok]' member='482' />
              <groupfilter function='member' level='[none:price:ok]' member='483' />
              <groupfilter function='member' level='[none:price:ok]' member='484' />
              <groupfilter function='member' level='[none:price:ok]' member='485' />
              <groupfilter function='member' level='[none:price:ok]' member='486' />
              <groupfilter function='member' level='[none:price:ok]' member='487' />
              <groupfilter function='member' level='[none:price:ok]' member='489' />
              <groupfilter function='member' level='[none:price:ok]' member='490' />
              <groupfilter function='member' level='[none:price:ok]' member='491' />
              <groupfilter function='member' level='[none:price:ok]' member='492' />
              <groupfilter function='member' level='[none:price:ok]' member='493' />
              <groupfilter function='member' level='[none:price:ok]' member='494' />
              <groupfilter function='member' level='[none:price:ok]' member='495' />
              <groupfilter function='member' level='[none:price:ok]' member='496' />
              <groupfilter function='member' level='[none:price:ok]' member='497' />
              <groupfilter function='member' level='[none:price:ok]' member='498' />
              <groupfilter function='member' level='[none:price:ok]' member='499' />
              <groupfilter function='member' level='[none:price:ok]' member='500' />
              <groupfilter function='member' level='[none:price:ok]' member='501' />
              <groupfilter function='member' level='[none:price:ok]' member='502' />
              <groupfilter function='member' level='[none:price:ok]' member='503' />
              <groupfilter function='member' level='[none:price:ok]' member='504' />
              <groupfilter function='member' level='[none:price:ok]' member='505' />
              <groupfilter function='member' level='[none:price:ok]' member='506' />
              <groupfilter function='member' level='[none:price:ok]' member='507' />
              <groupfilter function='member' level='[none:price:ok]' member='509' />
              <groupfilter function='member' level='[none:price:ok]' member='510' />
              <groupfilter function='member' level='[none:price:ok]' member='511' />
              <groupfilter function='member' level='[none:price:ok]' member='512' />
              <groupfilter function='member' level='[none:price:ok]' member='514' />
              <groupfilter function='member' level='[none:price:ok]' member='515' />
              <groupfilter function='member' level='[none:price:ok]' member='516' />
              <groupfilter function='member' level='[none:price:ok]' member='517' />
              <groupfilter function='member' level='[none:price:ok]' member='518' />
              <groupfilter function='member' level='[none:price:ok]' member='519' />
              <groupfilter function='member' level='[none:price:ok]' member='520' />
              <groupfilter function='member' level='[none:price:ok]' member='521' />
              <groupfilter function='member' level='[none:price:ok]' member='522' />
              <groupfilter function='member' level='[none:price:ok]' member='523' />
              <groupfilter function='member' level='[none:price:ok]' member='524' />
              <groupfilter function='member' level='[none:price:ok]' member='525' />
              <groupfilter function='member' level='[none:price:ok]' member='527' />
              <groupfilter function='member' level='[none:price:ok]' member='528' />
              <groupfilter function='member' level='[none:price:ok]' member='529' />
              <groupfilter function='member' level='[none:price:ok]' member='530' />
              <groupfilter function='member' level='[none:price:ok]' member='531' />
              <groupfilter function='member' level='[none:price:ok]' member='533' />
              <groupfilter function='member' level='[none:price:ok]' member='534' />
              <groupfilter function='member' level='[none:price:ok]' member='535' />
              <groupfilter function='member' level='[none:price:ok]' member='536' />
              <groupfilter function='member' level='[none:price:ok]' member='537' />
              <groupfilter function='member' level='[none:price:ok]' member='538' />
              <groupfilter function='member' level='[none:price:ok]' member='539' />
              <groupfilter function='member' level='[none:price:ok]' member='541' />
              <groupfilter function='member' level='[none:price:ok]' member='542' />
              <groupfilter function='member' level='[none:price:ok]' member='543' />
              <groupfilter function='member' level='[none:price:ok]' member='544' />
              <groupfilter function='member' level='[none:price:ok]' member='546' />
              <groupfilter function='member' level='[none:price:ok]' member='547' />
              <groupfilter function='member' level='[none:price:ok]' member='548' />
              <groupfilter function='member' level='[none:price:ok]' member='549' />
              <groupfilter function='member' level='[none:price:ok]' member='550' />
              <groupfilter function='member' level='[none:price:ok]' member='551' />
              <groupfilter function='member' level='[none:price:ok]' member='552' />
              <groupfilter function='member' level='[none:price:ok]' member='553' />
              <groupfilter function='member' level='[none:price:ok]' member='555' />
              <groupfilter function='member' level='[none:price:ok]' member='556' />
              <groupfilter function='member' level='[none:price:ok]' member='557' />
              <groupfilter function='member' level='[none:price:ok]' member='558' />
              <groupfilter function='member' level='[none:price:ok]' member='559' />
              <groupfilter function='member' level='[none:price:ok]' member='560' />
              <groupfilter function='member' level='[none:price:ok]' member='564' />
              <groupfilter function='member' level='[none:price:ok]' member='566' />
              <groupfilter function='member' level='[none:price:ok]' member='570' />
              <groupfilter function='member' level='[none:price:ok]' member='572' />
              <groupfilter function='member' level='[none:price:ok]' member='573' />
              <groupfilter function='member' level='[none:price:ok]' member='574' />
              <groupfilter function='member' level='[none:price:ok]' member='575' />
              <groupfilter function='member' level='[none:price:ok]' member='576' />
              <groupfilter function='member' level='[none:price:ok]' member='577' />
              <groupfilter function='member' level='[none:price:ok]' member='578' />
              <groupfilter function='member' level='[none:price:ok]' member='579' />
              <groupfilter function='member' level='[none:price:ok]' member='580' />
              <groupfilter function='member' level='[none:price:ok]' member='581' />
              <groupfilter function='member' level='[none:price:ok]' member='583' />
              <groupfilter function='member' level='[none:price:ok]' member='584' />
              <groupfilter function='member' level='[none:price:ok]' member='585' />
              <groupfilter function='member' level='[none:price:ok]' member='586' />
              <groupfilter function='member' level='[none:price:ok]' member='587' />
              <groupfilter function='member' level='[none:price:ok]' member='588' />
              <groupfilter function='member' level='[none:price:ok]' member='589' />
              <groupfilter function='member' level='[none:price:ok]' member='590' />
              <groupfilter function='member' level='[none:price:ok]' member='595' />
              <groupfilter function='member' level='[none:price:ok]' member='596' />
              <groupfilter function='member' level='[none:price:ok]' member='597' />
              <groupfilter function='member' level='[none:price:ok]' member='598' />
              <groupfilter function='member' level='[none:price:ok]' member='599' />
              <groupfilter function='member' level='[none:price:ok]' member='600' />
              <groupfilter function='member' level='[none:price:ok]' member='602' />
              <groupfilter function='member' level='[none:price:ok]' member='605' />
              <groupfilter function='member' level='[none:price:ok]' member='606' />
              <groupfilter function='member' level='[none:price:ok]' member='607' />
              <groupfilter function='member' level='[none:price:ok]' member='608' />
              <groupfilter function='member' level='[none:price:ok]' member='613' />
              <groupfilter function='member' level='[none:price:ok]' member='614' />
              <groupfilter function='member' level='[none:price:ok]' member='615' />
              <groupfilter function='member' level='[none:price:ok]' member='617' />
              <groupfilter function='member' level='[none:price:ok]' member='619' />
              <groupfilter function='member' level='[none:price:ok]' member='620' />
              <groupfilter function='member' level='[none:price:ok]' member='621' />
              <groupfilter function='member' level='[none:price:ok]' member='625' />
              <groupfilter function='member' level='[none:price:ok]' member='627' />
              <groupfilter function='member' level='[none:price:ok]' member='628' />
              <groupfilter function='member' level='[none:price:ok]' member='629' />
              <groupfilter function='member' level='[none:price:ok]' member='630' />
              <groupfilter function='member' level='[none:price:ok]' member='631' />
              <groupfilter function='member' level='[none:price:ok]' member='633' />
              <groupfilter function='member' level='[none:price:ok]' member='634' />
              <groupfilter function='member' level='[none:price:ok]' member='635' />
              <groupfilter function='member' level='[none:price:ok]' member='636' />
              <groupfilter function='member' level='[none:price:ok]' member='638' />
              <groupfilter function='member' level='[none:price:ok]' member='639' />
              <groupfilter function='member' level='[none:price:ok]' member='640' />
              <groupfilter function='member' level='[none:price:ok]' member='641' />
              <groupfilter function='member' level='[none:price:ok]' member='642' />
              <groupfilter function='member' level='[none:price:ok]' member='643' />
              <groupfilter function='member' level='[none:price:ok]' member='649' />
              <groupfilter function='member' level='[none:price:ok]' member='650' />
              <groupfilter function='member' level='[none:price:ok]' member='651' />
              <groupfilter function='member' level='[none:price:ok]' member='654' />
              <groupfilter function='member' level='[none:price:ok]' member='657' />
              <groupfilter function='member' level='[none:price:ok]' member='659' />
              <groupfilter function='member' level='[none:price:ok]' member='662' />
              <groupfilter function='member' level='[none:price:ok]' member='664' />
              <groupfilter function='member' level='[none:price:ok]' member='665' />
              <groupfilter function='member' level='[none:price:ok]' member='666' />
              <groupfilter function='member' level='[none:price:ok]' member='668' />
              <groupfilter function='member' level='[none:price:ok]' member='669' />
              <groupfilter function='member' level='[none:price:ok]' member='670' />
              <groupfilter function='member' level='[none:price:ok]' member='671' />
              <groupfilter function='member' level='[none:price:ok]' member='672' />
              <groupfilter function='member' level='[none:price:ok]' member='673' />
              <groupfilter function='member' level='[none:price:ok]' member='674' />
              <groupfilter function='member' level='[none:price:ok]' member='675' />
              <groupfilter function='member' level='[none:price:ok]' member='678' />
              <groupfilter function='member' level='[none:price:ok]' member='679' />
              <groupfilter function='member' level='[none:price:ok]' member='680' />
              <groupfilter function='member' level='[none:price:ok]' member='684' />
              <groupfilter function='member' level='[none:price:ok]' member='685' />
              <groupfilter function='member' level='[none:price:ok]' member='689' />
              <groupfilter function='member' level='[none:price:ok]' member='690' />
              <groupfilter function='member' level='[none:price:ok]' member='693' />
              <groupfilter function='member' level='[none:price:ok]' member='695' />
              <groupfilter function='member' level='[none:price:ok]' member='696' />
              <groupfilter function='member' level='[none:price:ok]' member='699' />
              <groupfilter function='member' level='[none:price:ok]' member='700' />
              <groupfilter function='member' level='[none:price:ok]' member='701' />
              <groupfilter function='member' level='[none:price:ok]' member='704' />
              <groupfilter function='member' level='[none:price:ok]' member='707' />
              <groupfilter function='member' level='[none:price:ok]' member='712' />
              <groupfilter function='member' level='[none:price:ok]' member='713' />
              <groupfilter function='member' level='[none:price:ok]' member='714' />
              <groupfilter function='member' level='[none:price:ok]' member='716' />
              <groupfilter function='member' level='[none:price:ok]' member='718' />
              <groupfilter function='member' level='[none:price:ok]' member='720' />
              <groupfilter function='member' level='[none:price:ok]' member='721' />
              <groupfilter function='member' level='[none:price:ok]' member='723' />
              <groupfilter function='member' level='[none:price:ok]' member='724' />
              <groupfilter function='member' level='[none:price:ok]' member='725' />
              <groupfilter function='member' level='[none:price:ok]' member='727' />
              <groupfilter function='member' level='[none:price:ok]' member='728' />
              <groupfilter function='member' level='[none:price:ok]' member='729' />
              <groupfilter function='member' level='[none:price:ok]' member='732' />
              <groupfilter function='member' level='[none:price:ok]' member='736' />
              <groupfilter function='member' level='[none:price:ok]' member='737' />
              <groupfilter function='member' level='[none:price:ok]' member='741' />
              <groupfilter function='member' level='[none:price:ok]' member='744' />
              <groupfilter function='member' level='[none:price:ok]' member='745' />
              <groupfilter function='member' level='[none:price:ok]' member='746' />
              <groupfilter function='member' level='[none:price:ok]' member='748' />
              <groupfilter function='member' level='[none:price:ok]' member='749' />
              <groupfilter function='member' level='[none:price:ok]' member='750' />
              <groupfilter function='member' level='[none:price:ok]' member='753' />
              <groupfilter function='member' level='[none:price:ok]' member='754' />
              <groupfilter function='member' level='[none:price:ok]' member='756' />
              <groupfilter function='member' level='[none:price:ok]' member='757' />
              <groupfilter function='member' level='[none:price:ok]' member='760' />
              <groupfilter function='member' level='[none:price:ok]' member='761' />
              <groupfilter function='member' level='[none:price:ok]' member='764' />
              <groupfilter function='member' level='[none:price:ok]' member='765' />
              <groupfilter function='member' level='[none:price:ok]' member='766' />
              <groupfilter function='member' level='[none:price:ok]' member='771' />
              <groupfilter function='member' level='[none:price:ok]' member='774' />
              <groupfilter function='member' level='[none:price:ok]' member='775' />
              <groupfilter function='member' level='[none:price:ok]' member='779' />
              <groupfilter function='member' level='[none:price:ok]' member='782' />
              <groupfilter function='member' level='[none:price:ok]' member='789' />
              <groupfilter function='member' level='[none:price:ok]' member='790' />
              <groupfilter function='member' level='[none:price:ok]' member='792' />
              <groupfilter function='member' level='[none:price:ok]' member='795' />
              <groupfilter function='member' level='[none:price:ok]' member='797' />
              <groupfilter function='member' level='[none:price:ok]' member='799' />
              <groupfilter function='member' level='[none:price:ok]' member='800' />
              <groupfilter function='member' level='[none:price:ok]' member='801' />
              <groupfilter function='member' level='[none:price:ok]' member='804' />
              <groupfilter function='member' level='[none:price:ok]' member='806' />
              <groupfilter function='member' level='[none:price:ok]' member='807' />
              <groupfilter function='member' level='[none:price:ok]' member='820' />
              <groupfilter function='member' level='[none:price:ok]' member='821' />
              <groupfilter function='member' level='[none:price:ok]' member='823' />
              <groupfilter function='member' level='[none:price:ok]' member='829' />
              <groupfilter function='member' level='[none:price:ok]' member='830' />
              <groupfilter function='member' level='[none:price:ok]' member='832' />
              <groupfilter function='member' level='[none:price:ok]' member='833' />
              <groupfilter function='member' level='[none:price:ok]' member='838' />
              <groupfilter function='member' level='[none:price:ok]' member='839' />
              <groupfilter function='member' level='[none:price:ok]' member='840' />
              <groupfilter function='member' level='[none:price:ok]' member='843' />
              <groupfilter function='member' level='[none:price:ok]' member='845' />
              <groupfilter function='member' level='[none:price:ok]' member='846' />
              <groupfilter function='member' level='[none:price:ok]' member='848' />
              <groupfilter function='member' level='[none:price:ok]' member='849' />
              <groupfilter function='member' level='[none:price:ok]' member='850' />
              <groupfilter function='member' level='[none:price:ok]' member='851' />
              <groupfilter function='member' level='[none:price:ok]' member='856' />
              <groupfilter function='member' level='[none:price:ok]' member='857' />
              <groupfilter function='member' level='[none:price:ok]' member='862' />
              <groupfilter function='member' level='[none:price:ok]' member='863' />
              <groupfilter function='member' level='[none:price:ok]' member='867' />
              <groupfilter function='member' level='[none:price:ok]' member='868' />
              <groupfilter function='member' level='[none:price:ok]' member='869' />
              <groupfilter function='member' level='[none:price:ok]' member='875' />
              <groupfilter function='member' level='[none:price:ok]' member='879' />
              <groupfilter function='member' level='[none:price:ok]' member='880' />
              <groupfilter function='member' level='[none:price:ok]' member='886' />
              <groupfilter function='member' level='[none:price:ok]' member='889' />
              <groupfilter function='member' level='[none:price:ok]' member='890' />
              <groupfilter function='member' level='[none:price:ok]' member='895' />
              <groupfilter function='member' level='[none:price:ok]' member='899' />
              <groupfilter function='member' level='[none:price:ok]' member='900' />
              <groupfilter function='member' level='[none:price:ok]' member='901' />
              <groupfilter function='member' level='[none:price:ok]' member='904' />
              <groupfilter function='member' level='[none:price:ok]' member='909' />
              <groupfilter function='member' level='[none:price:ok]' member='913' />
              <groupfilter function='member' level='[none:price:ok]' member='920' />
              <groupfilter function='member' level='[none:price:ok]' member='924' />
              <groupfilter function='member' level='[none:price:ok]' member='926' />
              <groupfilter function='member' level='[none:price:ok]' member='928' />
              <groupfilter function='member' level='[none:price:ok]' member='929' />
              <groupfilter function='member' level='[none:price:ok]' member='932' />
              <groupfilter function='member' level='[none:price:ok]' member='939' />
              <groupfilter function='member' level='[none:price:ok]' member='941' />
              <groupfilter function='member' level='[none:price:ok]' member='943' />
              <groupfilter function='member' level='[none:price:ok]' member='945' />
              <groupfilter function='member' level='[none:price:ok]' member='946' />
              <groupfilter function='member' level='[none:price:ok]' member='949' />
              <groupfilter function='member' level='[none:price:ok]' member='950' />
              <groupfilter function='member' level='[none:price:ok]' member='951' />
              <groupfilter function='member' level='[none:price:ok]' member='955' />
              <groupfilter function='member' level='[none:price:ok]' member='956' />
              <groupfilter function='member' level='[none:price:ok]' member='957' />
              <groupfilter function='member' level='[none:price:ok]' member='960' />
              <groupfilter function='member' level='[none:price:ok]' member='962' />
              <groupfilter function='member' level='[none:price:ok]' member='963' />
              <groupfilter function='member' level='[none:price:ok]' member='975' />
              <groupfilter function='member' level='[none:price:ok]' member='979' />
              <groupfilter function='member' level='[none:price:ok]' member='980' />
              <groupfilter function='member' level='[none:price:ok]' member='985' />
              <groupfilter function='member' level='[none:price:ok]' member='990' />
              <groupfilter function='member' level='[none:price:ok]' member='991' />
              <groupfilter function='member' level='[none:price:ok]' member='994' />
              <groupfilter function='member' level='[none:price:ok]' member='995' />
              <groupfilter function='member' level='[none:price:ok]' member='998' />
              <groupfilter function='member' level='[none:price:ok]' member='999' />
              <groupfilter function='member' level='[none:price:ok]' member='1000' />
              <groupfilter function='member' level='[none:price:ok]' member='1002' />
              <groupfilter function='member' level='[none:price:ok]' member='1006' />
              <groupfilter function='member' level='[none:price:ok]' member='1014' />
              <groupfilter function='member' level='[none:price:ok]' member='1022' />
              <groupfilter function='member' level='[none:price:ok]' member='1035' />
              <groupfilter function='member' level='[none:price:ok]' member='1048' />
              <groupfilter function='member' level='[none:price:ok]' member='1050' />
              <groupfilter function='member' level='[none:price:ok]' member='1057' />
              <groupfilter function='member' level='[none:price:ok]' member='1063' />
              <groupfilter function='member' level='[none:price:ok]' member='1064' />
              <groupfilter function='member' level='[none:price:ok]' member='1069' />
              <groupfilter function='member' level='[none:price:ok]' member='1075' />
              <groupfilter function='member' level='[none:price:ok]' member='1078' />
              <groupfilter function='member' level='[none:price:ok]' member='1085' />
              <groupfilter function='member' level='[none:price:ok]' member='1087' />
              <groupfilter function='member' level='[none:price:ok]' member='1091' />
              <groupfilter function='member' level='[none:price:ok]' member='1092' />
              <groupfilter function='member' level='[none:price:ok]' member='1095' />
              <groupfilter function='member' level='[none:price:ok]' member='1097' />
              <groupfilter function='member' level='[none:price:ok]' member='1098' />
              <groupfilter function='member' level='[none:price:ok]' member='1100' />
              <groupfilter function='member' level='[none:price:ok]' member='1103' />
              <groupfilter function='member' level='[none:price:ok]' member='1108' />
              <groupfilter function='member' level='[none:price:ok]' member='1114' />
              <groupfilter function='member' level='[none:price:ok]' member='1117' />
              <groupfilter function='member' level='[none:price:ok]' member='1129' />
              <groupfilter function='member' level='[none:price:ok]' member='1143' />
              <groupfilter function='member' level='[none:price:ok]' member='1147' />
              <groupfilter function='member' level='[none:price:ok]' member='1150' />
              <groupfilter function='member' level='[none:price:ok]' member='1154' />
              <groupfilter function='member' level='[none:price:ok]' member='1157' />
              <groupfilter function='member' level='[none:price:ok]' member='1163' />
              <groupfilter function='member' level='[none:price:ok]' member='1164' />
              <groupfilter function='member' level='[none:price:ok]' member='1175' />
              <groupfilter function='member' level='[none:price:ok]' member='1177' />
              <groupfilter function='member' level='[none:price:ok]' member='1179' />
              <groupfilter function='member' level='[none:price:ok]' member='1184' />
              <groupfilter function='member' level='[none:price:ok]' member='1193' />
              <groupfilter function='member' level='[none:price:ok]' member='1195' />
              <groupfilter function='member' level='[none:price:ok]' member='1199' />
              <groupfilter function='member' level='[none:price:ok]' member='1200' />
              <groupfilter function='member' level='[none:price:ok]' member='1202' />
              <groupfilter function='member' level='[none:price:ok]' member='1209' />
              <groupfilter function='member' level='[none:price:ok]' member='1211' />
              <groupfilter function='member' level='[none:price:ok]' member='1215' />
              <groupfilter function='member' level='[none:price:ok]' member='1224' />
              <groupfilter function='member' level='[none:price:ok]' member='1227' />
              <groupfilter function='member' level='[none:price:ok]' member='1235' />
              <groupfilter function='member' level='[none:price:ok]' member='1243' />
              <groupfilter function='member' level='[none:price:ok]' member='1250' />
              <groupfilter function='member' level='[none:price:ok]' member='1264' />
              <groupfilter function='member' level='[none:price:ok]' member='1275' />
              <groupfilter function='member' level='[none:price:ok]' member='1286' />
              <groupfilter function='member' level='[none:price:ok]' member='1290' />
              <groupfilter function='member' level='[none:price:ok]' member='1293' />
              <groupfilter function='member' level='[none:price:ok]' member='1294' />
              <groupfilter function='member' level='[none:price:ok]' member='1299' />
              <groupfilter function='member' level='[none:price:ok]' member='1300' />
              <groupfilter function='member' level='[none:price:ok]' member='1305' />
              <groupfilter function='member' level='[none:price:ok]' member='1330' />
              <groupfilter function='member' level='[none:price:ok]' member='1335' />
              <groupfilter function='member' level='[none:price:ok]' member='1336' />
              <groupfilter function='member' level='[none:price:ok]' member='1350' />
              <groupfilter function='member' level='[none:price:ok]' member='1353' />
              <groupfilter function='member' level='[none:price:ok]' member='1357' />
              <groupfilter function='member' level='[none:price:ok]' member='1364' />
              <groupfilter function='member' level='[none:price:ok]' member='1377' />
              <groupfilter function='member' level='[none:price:ok]' member='1380' />
              <groupfilter function='member' level='[none:price:ok]' member='1385' />
              <groupfilter function='member' level='[none:price:ok]' member='1400' />
              <groupfilter function='member' level='[none:price:ok]' member='1414' />
              <groupfilter function='member' level='[none:price:ok]' member='1421' />
              <groupfilter function='member' level='[none:price:ok]' member='1428' />
              <groupfilter function='member' level='[none:price:ok]' member='1430' />
              <groupfilter function='member' level='[none:price:ok]' member='1448' />
              <groupfilter function='member' level='[none:price:ok]' member='1489' />
              <groupfilter function='member' level='[none:price:ok]' member='1493' />
              <groupfilter function='member' level='[none:price:ok]' member='1495' />
              <groupfilter function='member' level='[none:price:ok]' member='1500' />
              <groupfilter function='member' level='[none:price:ok]' member='1502' />
              <groupfilter function='member' level='[none:price:ok]' member='1522' />
              <groupfilter function='member' level='[none:price:ok]' member='1545' />
              <groupfilter function='member' level='[none:price:ok]' member='1550' />
              <groupfilter function='member' level='[none:price:ok]' member='1556' />
              <groupfilter function='member' level='[none:price:ok]' member='1560' />
              <groupfilter function='member' level='[none:price:ok]' member='1571' />
              <groupfilter function='member' level='[none:price:ok]' member='1575' />
              <groupfilter function='member' level='[none:price:ok]' member='1577' />
              <groupfilter function='member' level='[none:price:ok]' member='1591' />
              <groupfilter function='member' level='[none:price:ok]' member='1599' />
              <groupfilter function='member' level='[none:price:ok]' member='1607' />
              <groupfilter function='member' level='[none:price:ok]' member='1611' />
              <groupfilter function='member' level='[none:price:ok]' member='1655' />
              <groupfilter function='member' level='[none:price:ok]' member='1656' />
              <groupfilter function='member' level='[none:price:ok]' member='1671' />
              <groupfilter function='member' level='[none:price:ok]' member='1679' />
              <groupfilter function='member' level='[none:price:ok]' member='1736' />
              <groupfilter function='member' level='[none:price:ok]' member='1737' />
              <groupfilter function='member' level='[none:price:ok]' member='1750' />
              <groupfilter function='member' level='[none:price:ok]' member='1800' />
              <groupfilter function='member' level='[none:price:ok]' member='1814' />
              <groupfilter function='member' level='[none:price:ok]' member='1833' />
              <groupfilter function='member' level='[none:price:ok]' member='1838' />
              <groupfilter function='member' level='[none:price:ok]' member='1850' />
              <groupfilter function='member' level='[none:price:ok]' member='1862' />
              <groupfilter function='member' level='[none:price:ok]' member='1886' />
              <groupfilter function='member' level='[none:price:ok]' member='1895' />
              <groupfilter function='member' level='[none:price:ok]' member='1950' />
              <groupfilter function='member' level='[none:price:ok]' member='1964' />
              <groupfilter function='member' level='[none:price:ok]' member='1994' />
              <groupfilter function='member' level='[none:price:ok]' member='1999' />
              <groupfilter function='member' level='[none:price:ok]' member='2000' />
              <groupfilter function='member' level='[none:price:ok]' member='2048' />
              <groupfilter function='member' level='[none:price:ok]' member='2063' />
              <groupfilter function='member' level='[none:price:ok]' member='2071' />
              <groupfilter function='member' level='[none:price:ok]' member='2099' />
              <groupfilter function='member' level='[none:price:ok]' member='2136' />
              <groupfilter function='member' level='[none:price:ok]' member='2250' />
              <groupfilter function='member' level='[none:price:ok]' member='2400' />
              <groupfilter function='member' level='[none:price:ok]' member='2432' />
              <groupfilter function='member' level='[none:price:ok]' member='2450' />
              <groupfilter function='member' level='[none:price:ok]' member='2480' />
              <groupfilter function='member' level='[none:price:ok]' member='2497' />
              <groupfilter function='member' level='[none:price:ok]' member='2500' />
              <groupfilter function='member' level='[none:price:ok]' member='2502' />
              <groupfilter function='member' level='[none:price:ok]' member='2643' />
              <groupfilter function='member' level='[none:price:ok]' member='2699' />
              <groupfilter function='member' level='[none:price:ok]' member='2748' />
              <groupfilter function='member' level='[none:price:ok]' member='2750' />
              <groupfilter function='member' level='[none:price:ok]' member='2786' />
              <groupfilter function='member' level='[none:price:ok]' member='2800' />
              <groupfilter function='member' level='[none:price:ok]' member='2857' />
              <groupfilter function='member' level='[none:price:ok]' member='2900' />
              <groupfilter function='member' level='[none:price:ok]' member='2999' />
              <groupfilter function='member' level='[none:price:ok]' member='3000' />
              <groupfilter function='member' level='[none:price:ok]' member='3040' />
              <groupfilter function='member' level='[none:price:ok]' member='3143' />
              <groupfilter function='member' level='[none:price:ok]' member='3300' />
              <groupfilter function='member' level='[none:price:ok]' member='3304' />
              <groupfilter function='member' level='[none:price:ok]' member='3380' />
              <groupfilter function='member' level='[none:price:ok]' member='3600' />
              <groupfilter function='member' level='[none:price:ok]' member='3643' />
              <groupfilter function='member' level='[none:price:ok]' member='3750' />
              <groupfilter function='member' level='[none:price:ok]' member='3780' />
              <groupfilter function='member' level='[none:price:ok]' member='3800' />
              <groupfilter function='member' level='[none:price:ok]' member='3804' />
              <groupfilter function='member' level='[none:price:ok]' member='4000' />
              <groupfilter function='member' level='[none:price:ok]' member='4100' />
              <groupfilter function='member' level='[none:price:ok]' member='4129' />
              <groupfilter function='member' level='[none:price:ok]' member='4503' />
              <groupfilter function='member' level='[none:price:ok]' member='4645' />
              <groupfilter function='member' level='[none:price:ok]' member='4950' />
              <groupfilter function='member' level='[none:price:ok]' member='5000' />
              <groupfilter function='member' level='[none:price:ok]' member='6000' />
              <groupfilter function='member' level='[none:price:ok]' member='7500' />
              <groupfilter function='member' level='[none:price:ok]' member='8000' />
              <groupfilter function='member' level='[none:price:ok]' member='8403' />
              <groupfilter function='member' level='[none:price:ok]' member='8550' />
              <groupfilter function='member' level='[none:price:ok]' member='9994' />
              <groupfilter function='member' level='[none:price:ok]' member='9999' />
              <groupfilter function='member' level='[none:price:ok]' member='10000' />
              <groupfilter function='member' level='[none:price:ok]' member='12738' />
              <groupfilter function='member' level='[none:price:ok]' member='20000' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood:nk]</column>
            <column>[federated.0ru8wam18lyyhe129e16g0307lb4].[none:price:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1084i8c0f57s1e14ytlmd11ds3q9].[Longitude (generated)]' field-type='quantitative' max='-8202680.31574097' min='-8269622.1686836192' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1084i8c0f57s1e14ytlmd11ds3q9].[Latitude (generated)]' field-type='quantitative' max='5004596.7661973247' min='4924953.8886289988' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1084i8c0f57s1e14ytlmd11ds3q9].[clct:Geometry:nk]' />
              <color column='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' />
              <lod column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood:nk]' />
              <geometry column='[federated.1084i8c0f57s1e14ytlmd11ds3q9].[clct:Geometry:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='0.58171272277832031' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1084i8c0f57s1e14ytlmd11ds3q9].[Latitude (generated)]</rows>
        <cols>[federated.1084i8c0f57s1e14ytlmd11ds3q9].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{4012A1F6-5A33-4D56-83F6-BF73F8BE5D0F}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#0f325a' fontname='Lato' fontsize='10'>Room Type</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='listings.csv+ (Multiple Connections)' name='federated.0ru8wam18lyyhe129e16g0307lb4' />
          </datasources>
          <datasource-dependencies datasource='federated.0ru8wam18lyyhe129e16g0307lb4'>
            <column-instance column='[price]' derivation='Avg' name='[avg:price:qk]' pivot='key' type='quantitative' />
            <column-instance column='[id]' derivation='CountD' name='[ctd:id:qk]' pivot='key' type='quantitative' />
            <column caption='Id' datatype='integer' name='[id]' role='measure' type='quantitative' />
            <column caption='Neighbourhood Group' datatype='string' name='[neighbourhood_group]' role='dimension' type='nominal' />
            <column-instance column='[neighbourhood_group]' derivation='None' name='[none:neighbourhood_group:nk]' pivot='key' type='nominal' />
            <column-instance column='[room_type]' derivation='None' name='[none:room_type:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' caption='Price' datatype='integer' name='[price]' role='dimension' type='ordinal' />
            <column caption='Room Type' datatype='string' name='[room_type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:neighbourhood_group:nk]' />
              <groupfilter function='member' level='[none:neighbourhood_group:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:room_type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0ru8wam18lyyhe129e16g0307lb4].[ctd:id:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]</column>
            <column>[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[ctd:id:qk]' scope='cols' value='Listings' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='height' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:room_type:nk]' value='28' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:room_type:nk]' value='false' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='0' />
            <format attr='band-size' scope='cols' value='0' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:room_type:nk]' />
              <text column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:room_type:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='444' />
                <format attr='maxwidth' value='444' />
                <format attr='minheight' value='80' />
                <format attr='maxheight' value='80' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ru8wam18lyyhe129e16g0307lb4].[none:room_type:nk]</rows>
        <cols>[federated.0ru8wam18lyyhe129e16g0307lb4].[ctd:id:qk]</cols>
        <mark-labels>
          <mark-label id='0' label-state='on'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.0ru8wam18lyyhe129e16g0307lb4].[ctd:id:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.0ru8wam18lyyhe129e16g0307lb4].[none:room_type:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.0ru8wam18lyyhe129e16g0307lb4].[ctd:id:qk]</field>
                  <field>[federated.0ru8wam18lyyhe129e16g0307lb4].[none:room_type:nk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>20160</value>
                <value>&quot;Entire home/apt&quot;</value>
              </tuple>
            </tuple-reference>
          </mark-label>
        </mark-labels>
      </table>
      <simple-id uuid='{5EFA082B-7D4A-4C60-AF2B-0348F85E38B9}' />
    </worksheet>
    <worksheet name='Sheet 6'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Listings density</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='listings.csv+ (Multiple Connections)' name='federated.0ru8wam18lyyhe129e16g0307lb4' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0ru8wam18lyyhe129e16g0307lb4'>
            <column datatype='spatial' name='[Geometry]' role='measure' type='nominal' />
            <column-instance column='[Geometry]' derivation='Collect' name='[clct:Geometry:nk]' pivot='key' type='nominal' />
            <column-instance column='[id]' derivation='CountD' name='[ctd:id:qk]' pivot='key' type='quantitative' />
            <column caption='Id' datatype='integer' name='[id]' role='measure' type='quantitative' />
            <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
            <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[Longitude (generated)]' field-type='quantitative' max='-8195983.5499591893' min='-8269391.1173983719' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[Latitude (generated)]' field-type='quantitative' max='5002726.7590255216' min='4930365.733660155' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[ctd:id:qk]' field-type='quantitative' max-size='1' min-size='0.167168' type='quantsize' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0ru8wam18lyyhe129e16g0307lb4].[clct:Geometry:nk]' />
              <lod column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood:nk]' />
              <size column='[federated.0ru8wam18lyyhe129e16g0307lb4].[ctd:id:qk]' />
              <lod column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='density-kernel-size' value='0.84558010101318359' />
                <format attr='size' value='1.4172928333282471' />
                <format attr='mark-color' value='#f17b79' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
                <format attr='mark-transparency' value='180' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ru8wam18lyyhe129e16g0307lb4].[Latitude (generated)]</rows>
        <cols>[federated.0ru8wam18lyyhe129e16g0307lb4].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{4D2B71F6-124E-428F-BA7C-A43F9B3684BD}' />
    </worksheet>
    <worksheet name='Sheet 7'>
      <layout-options>
        <title>
          <formatted-text />
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='listings.csv+ (Multiple Connections)' name='federated.0ru8wam18lyyhe129e16g0307lb4' />
          </datasources>
          <datasource-dependencies datasource='federated.0ru8wam18lyyhe129e16g0307lb4'>
            <column-instance column='[id]' derivation='CountD' name='[ctd:id:qk]' pivot='key' type='quantitative' />
            <column caption='Id' datatype='integer' name='[id]' role='measure' type='quantitative' />
            <column caption='Neighbourhood Group' datatype='string' name='[neighbourhood_group]' role='dimension' type='nominal' />
            <column-instance column='[neighbourhood_group]' derivation='None' name='[none:neighbourhood_group:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:neighbourhood_group:nk]' />
              <groupfilter function='member' level='[none:neighbourhood_group:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0ru8wam18lyyhe129e16g0307lb4].[ctd:id:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='color' value='#b07aa1' />
            <format attr='height' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]' value='28' />
            <format attr='width' value='206' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]' value='240' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0ru8wam18lyyhe129e16g0307lb4].[ctd:id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{1B04F044-94A2-4679-92F7-4A8EB9AF3DBC}' />
    </worksheet>
    <worksheet name='Sheet 8'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Princing Distribution </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='listings.csv+ (Multiple Connections)' name='federated.0ru8wam18lyyhe129e16g0307lb4' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0ru8wam18lyyhe129e16g0307lb4'>
            <column datatype='spatial' name='[Geometry]' role='measure' type='nominal' />
            <column-instance column='[price]' derivation='Avg' name='[avg:price:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Geometry]' derivation='Collect' name='[clct:Geometry:nk]' pivot='key' type='nominal' />
            <column caption='Neighbourhood Group' datatype='string' name='[neighbourhood_group]' role='dimension' type='nominal' />
            <column-instance column='[neighbourhood_group]' derivation='None' name='[none:neighbourhood_group:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' caption='Price' datatype='integer' name='[price]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:neighbourhood_group:nk]' member='&quot;Bronx&quot;' />
              <groupfilter function='member' level='[none:neighbourhood_group:nk]' member='&quot;Brooklyn&quot;' />
              <groupfilter function='member' level='[none:neighbourhood_group:nk]' member='&quot;Manhattan&quot;' />
              <groupfilter function='member' level='[none:neighbourhood_group:nk]' member='&quot;Queens&quot;' />
              <groupfilter function='member' level='[none:neighbourhood_group:nk]' member='&quot;Staten Island&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[Longitude (generated)]' field-type='quantitative' max='-8200757.0866127033' min='-8269046.3042144682' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0ru8wam18lyyhe129e16g0307lb4].[Latitude (generated)]' field-type='quantitative' max='5002502.1668167785' min='4934071.561379116' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0ru8wam18lyyhe129e16g0307lb4].[clct:Geometry:nk]' />
              <color column='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' />
              <lod column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]' />
              <text column='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood_group:nk]' />
              <text column='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' />
              <geometry column='[federated.0ru8wam18lyyhe129e16g0307lb4].[clct:Geometry:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='1.5712155103683472' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ru8wam18lyyhe129e16g0307lb4].[Latitude (generated)]</rows>
        <cols>[federated.0ru8wam18lyyhe129e16g0307lb4].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{BFB9F110-65E2-4981-8B28-5D8ED6537735}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='14534' id='14' name='Sheet 7' w='20677' x='21257' y='45419' />
        <zone h='46998' id='9' name='Sheet 8' w='19964' x='624' y='1343' />
        <zone h='43128' id='3' name='Sheet 3' w='20009' x='579' y='48973' />
        <zone h='6161' id='8' name='Sheet 3' pane-specification-id='0' param='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' type-v2='color' w='6283' x='13859' y='85150' />
        <zone h='6319' id='12' name='Sheet 8' pane-specification-id='0' param='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' type-v2='color' w='5971' x='14171' y='40995' />
        <zone h='46840' id='13' name='Sheet 6' w='19875' x='21212' y='1343'>
          <layout-cache minheight='257' minwidth='202' type-h='scalable' type-w='scalable' />
        </zone>
        <zone h='17773' id='16' name='Sheet 4' w='20053' x='21257' y='61927' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1300' minheight='1300' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='20' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98736' id='19' param='vert' type-v2='layout-flow' w='99286' x='357' y='632'>
                <zone fixed-size='280' h='46998' id='9' is-fixed='true' name='Sheet 8' w='19964' x='624' y='1343'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6319' id='12' name='Sheet 8' pane-specification-id='0' param='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' type-v2='color' w='5971' x='14171' y='40995'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46840' id='13' is-fixed='true' name='Sheet 6' w='19875' x='21212' y='1343'>
                  <layout-cache minheight='257' minwidth='202' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='117' h='14534' id='14' is-fixed='true' name='Sheet 7' w='20677' x='21257' y='45419'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='43128' id='3' is-fixed='true' name='Sheet 3' w='20009' x='579' y='48973'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6161' id='8' name='Sheet 3' pane-specification-id='0' param='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' type-v2='color' w='6283' x='13859' y='85150'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='143' h='17773' id='16' is-fixed='true' name='Sheet 4' w='20053' x='21257' y='61927'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{B3211822-F248-43AA-A935-1466422E68A4}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' source-height='75'>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0ru8wam18lyyhe129e16g0307lb4].[none:neighbourhood:nk]' show-morefewerbutton='false' type='filter' />
            <card pane-specification-id='0' param='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{41AFC33D-AFF1-4AE8-ACB1-0763A2D82467}' />
    </window>
    <window class='worksheet' name='Sheet 8'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0ru8wam18lyyhe129e16g0307lb4].[avg:price:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{08BA053D-59F1-4555-90D4-5397A6D2AA9A}' />
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{142F5030-7A3E-457E-BDB7-F282197E55C7}' />
    </window>
    <window class='worksheet' name='Sheet 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{693DA441-04E6-469E-9951-9106557A4557}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <simple-id uuid='{D1EAA58A-8927-4512-8AD3-176F69CC5575}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 3'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 4'>
          <floating-toolbar-visibility value='1' />
        </viewpoint>
        <viewpoint name='Sheet 6'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 7' />
        <viewpoint name='Sheet 8'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{42B11489-FDA9-4E45-A3C8-A9127A2EF4D0}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='187' name='Sheet 4' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 6' width='192'>
      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
      Xb33+C/OeEMuVFtewgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='164' name='Sheet 7' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
